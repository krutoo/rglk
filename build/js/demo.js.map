{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/library/js/Point.js","webpack:///./src/library/js/PRNG.js","webpack:///./src/library/js/Node.js","webpack:///./src/library/js/Pathfinder.js","webpack:///./src/library/js/Explorer.js","webpack:///./src/library/js/Rectangle.js","webpack:///./src/library/js/Dungeon.js","webpack:///./src/library/js/Rglk.js","webpack:///./src/library/js/index.js","webpack:///./src/demo/js/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Point","x","y","_classCallCheck","this","point","Math","sqrt","pow","result","Number","_x","isNaN","_y","PRNG","seed","_seed","isFinite","random","min","max","_updateSeed","_Point2","Node","options","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","g","h","parent","path","currentNode","push","reverse","_g","_h","_parent","node","_Node","Pathfinder","isOpen","Function","TypeError","_isOpen","x1","y1","x2","y2","start","end","unvisitedNodes","visitedNodes","resultPath","_loop","currentNodeIndex","forEach","item","f","splice","isEqualTo","getPathToRoot","neighbors","_getNeighbors","_loop2","neighbor","find","_getHeuristic","length","abs","_Point","Explorer","isTransparent","_isTransparent","point0","point1","dx","dy","nx","ny","sx","sy","points","ix","iy","centerX","centerY","radius","checkExplored","checkArguments","apply","arguments","squareRaduis","center","minX","maxX","minY","maxY","line","_getPointsOfLine","tile","Rectangle","width","height","rectangle","callback","_width","_height","window","Dungeon","_tiles","_rooms","_corridors","_prng","_options","validateOptions","generate","resultOptions","keys","defaultOptions","option","parseInt","_isWall","isWall","concat","Array","slice","isArray","_generateBuilds","_optimizeBuilds","_createMap","_this2","floor","roomsAmount","roomMinSize","roomMaxSize","corridorMinLength","corridorMaxLength","children","lastRoom","newRoomWidth","newRoomHeight","newRoom","newCorridorLength","newCorridor","direction","bottom","top","right","left","_isSuitableBuilds","filter","child","_this3","from","every","newBuild","builds","build","includes","some","_isCollide","build1","build2","collides","topLeft","_getTopLeft","_translateBuilds","Infinity","bottomRight","offsetX","offsetY","_this4","_getBottomRight","_fillMap","_fillRectangle","startX","startY","corridorComplexity","rooms","corridors","Rglk","assign","_Rglk","rglk","_rglk","initSection","sectionSelector","render","section","document","querySelector","canvas","button","clientWidth","addEventListener","draw","data","context","getContext","_data","fov","dungeon","tileSize","canvasMinSide","dungeonMaxSide","calculateTileSize","clearRect","_data2","_data2$roomColor","roomColor","undefined","_data2$corridorColor","corridorColor","room","index","fillStyle","fillRect","needRoomsNumbers","textBaseline","textAlign","font","fillText","corridor","drawMap","distance","distanceTo","proportion","globalAlpha","drawFOV","strokeStyle","lineWidth","ceil","beginPath","moveTo","lineTo","stroke","closePath","drawPath","calculate","isFloor","search"],"mappings":"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","file":"js/demo.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 10);\n","/**\r\n * Represents a 2D Point.\r\n */\r\nexport default class Point {\r\n\t/**\r\n\t * Create a Point.\r\n\t * @param {number} x - the x of point.\r\n\t * @param {number} y - the y of point.\r\n\t */\r\n\tconstructor(x, y) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\tstatic create (object) {\r\n\t\tobject = object || {};\r\n\t\treturn new Point(\r\n\t\t\tobject.x,\r\n\t\t\tobject.y,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get x value.\r\n\t * @return {number} The x value.\r\n\t */\r\n\tget x () {\r\n\t\treturn Number(this._x) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set x value.\r\n\t * @param {number} The x value.\r\n\t */\r\n\tset x (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._x = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get y value.\r\n\t * @return {number} The y value.\r\n\t */\r\n\tget y () {\r\n\t\treturn Number(this._y) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set y value.\r\n\t * @param {number} The y value.\r\n\t */\r\n\tset y (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._y = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get distance to a point.\r\n\t * @param {Point} Object of Point class.\r\n\t * @return {number} The distance.\r\n\t */\r\n\tdistanceTo (point) {\r\n\t\tpoint = point || {};\r\n\t\treturn Math.sqrt(Math.pow(point.x - this.x, 2) + Math.pow(point.y - this.y, 2));\r\n\t}\r\n\r\n\tisEqualTo (point) {\r\n\t\tlet result = false;\r\n\t\tif (point instanceof Point) {\r\n\t\t\tresult = point.x === this.x && point.y === this.y;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n","/**\r\n * Represents a Pseudo Random Number Generator.\r\n * Thanks for author of this article: http://indiegamr.com/generate-repeatable-random-numbers-in-js/\r\n */\r\nexport default class PRNG {\r\n\t/**\r\n\t * Create a PRNG.\r\n\t * @param  {number} seed Seed - number which will the base for generate numbers.\r\n\t */\r\n\tconstructor (seed) {\r\n\t\tthis._seed = isNaN(seed) || !isFinite(seed)\r\n\t\t\t? Math.random()\r\n\t\t\t: Number(seed);\r\n\t}\r\n\r\n\t/**\r\n\t * Resturs random number between min and max.\r\n\t * @param  {number} [min=0] Lower bound.\r\n\t * @param  {number} [max=1] Upper bound.\r\n\t * @return {number} Float between min and max.\r\n\t */\r\n\tgenerate (min, max) {\r\n\t\tmax = isNaN(max) ? 1 : Number(max);\r\n\t\tmin = isNaN(min) ? 0 : Number(min);\r\n\t\tconst random = this._updateSeed() / 233280;\r\n\t\treturn min + random * (max - min);\r\n\t}\r\n\r\n\t/**\r\n\t * Update seed.\r\n\t * @return {number} Updated seed.\r\n\t */\r\n\t_updateSeed () {\r\n\t\treturn this._seed = (this._seed * 9301 + 49297) % 233280;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\nexport default class Node extends Point {\r\n\tconstructor(options) {\r\n\t\toptions = options || {};\r\n\t\tsuper(options.x, options.y);\r\n\t\tthis.g = options.g;\r\n\t\tthis.h = options.h;\r\n\t\tthis.parent = options.parent;\r\n\t}\r\n\r\n\tget g () {\r\n\t\treturn Number(this._g) || 0;\r\n\t}\r\n\r\n\tset g (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._g = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\tget h () {\r\n\t\treturn Number(this._h) || 0;\r\n\t}\r\n\r\n\tset h (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._h = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\tget parent () {\r\n\t\treturn this._parent instanceof Node\r\n\t\t\t? this._parent\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tset parent (node) {\r\n\t\tif (node instanceof Node) {\r\n\t\t\tthis._parent = node;\r\n\t\t}\r\n\t}\r\n\r\n\tget f () {\r\n\t\treturn (this.g + this.h);\r\n\t}\r\n\r\n\tgetPathToRoot () {\r\n\t\tconst path = [];\r\n\t\tlet currentNode = this;\r\n\t\twhile (currentNode.parent) {\r\n\t\t\tpath.push(currentNode);\r\n\t\t\tcurrentNode = currentNode.parent;\r\n\t\t}\r\n\t\treturn path.reverse();\r\n\t}\r\n}\r\n","import Node from './Node';\r\n\r\n/**\r\n * Represents a Pathfinder class.\r\n */\r\nexport default class Pathfinder {\r\n\t/**\r\n\t * Create a Pathfinder.\r\n\t * @param {Function} isOpen Callback, defines that point is open.\r\n\t */\r\n\tconstructor(isOpen) {\r\n\t\tif (isOpen instanceof Function) {\r\n\t\t\tthis._isOpen = isOpen;\r\n\t\t} else {\r\n\t\t\tthrow new TypeError('Pathfinder.constructor: first argument must be a function');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Search path between two points.\r\n\t * @param {number} x1 First point x.\r\n\t * @param {number} y1 First point y.\r\n\t * @param {number} x2 Second point x.\r\n\t * @param {number} y2 Second point y.\r\n\t * @return {Array} List of path points.\r\n\t */\r\n\tsearch(x1, y1, x2, y2) {\r\n\t\tlet start = new Node({\r\n\t\t\t\tx: x1,\r\n\t\t\t\ty: y1,\r\n\t\t\t}),\r\n\t\t\tend = new Node({\r\n\t\t\t\tx: x2,\r\n\t\t\t\ty: y2,\r\n\t\t\t}),\r\n\t\t\tunvisitedNodes = [start],\r\n\t\t\tvisitedNodes = [],\r\n\t\t\tresultPath = [];\r\n\r\n\t\t// main loop\r\n\t\twhile (unvisitedNodes.length) {\r\n\t\t\t// search in open list node with lowest value f = g + h\r\n\t\t\tlet currentNodeIndex = 0,\r\n\t\t\t\tcurrentNode = unvisitedNodes[0];\r\n\t\t\tunvisitedNodes.forEach((item, i) => {\r\n\t\t\t\tif (item.f < currentNode.f) {\r\n\t\t\t\t\tcurrentNode = item;\r\n\t\t\t\t\tcurrentNodeIndex = i;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// add found node to closed list, delete it from open list\r\n\t\t\tunvisitedNodes.splice(currentNodeIndex, 1);\r\n\t\t\tvisitedNodes.push(currentNode);\r\n\r\n\t\t\t// if current node is target then create path and break\r\n\t\t\tif (currentNode.isEqualTo(end)) {\r\n\t\t\t\tresultPath = currentNode.getPathToRoot();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tlet neighbors = this._getNeighbors(currentNode); // @TODO check length before run cycle\r\n\t\t\tfor (let i = 0; i < neighbors.length; i++) {\r\n\t\t\t\tlet neighbor = neighbors[i];\r\n\r\n\t\t\t\t// ignore neighbor if he in closed list\r\n\t\t\t\tif (visitedNodes.find(node => node.isEqualTo(neighbor))) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if neighbor not in open list, add him to open list, update h\r\n\t\t\t\tif (!unvisitedNodes.find(node => node.isEqualTo(neighbor))) {\r\n\t\t\t\t\tneighbor.h = this._getHeuristic(neighbor.x, neighbor.y, end.x, end.y);\r\n\t\t\t\t\tunvisitedNodes.push(neighbor);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn resultPath;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns heuristic value (Manhattan distance) between two nodes.\r\n\t * @param  {number} x1 First node x.\r\n\t * @param  {number} y1 First node y.\r\n\t * @param  {number} x2 Second node x.\r\n\t * @param  {number} y2 Second node y.\r\n\t * @return {number} heuristic value.\r\n\t */\r\n\t_getHeuristic (x1, y1, x2, y2) {\r\n\t\tconst d1 = Math.abs(x2 - x1),\r\n\t\t\td2 = Math.abs(y2 - y1);\r\n\t\treturn d1 + d2;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns list of node neighbors.\r\n\t * @param  {Node} node Node to get a neighbors.\r\n\t * @return {Array} List of neighbors.\r\n\t * @TODO move to Node class?\r\n\t */\r\n\t_getNeighbors (node) {\r\n\t\tlet neighbors = [];\r\n\t\tfor (let y = -1; y <= 1; y++) {\r\n\t\t\tfor (let x = -1; x <= 1; x++) {\r\n\t\t\t\t// if is not diagonal neighbor\r\n\t\t\t\tif (Math.abs(x + y) === 1) {\r\n\t\t\t\t\tif (this._isOpen(node.x + x, node.y + y)) {\r\n\t\t\t\t\t\tneighbors.push(new Node({\r\n\t\t\t\t\t\t\tx: node.x + x,\r\n\t\t\t\t\t\t\ty: node.y + y,\r\n\t\t\t\t\t\t\tg: node.g + 1,\r\n\t\t\t\t\t\t\tparent: node,\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn neighbors;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\n/**\r\n * Represents a Exlorer (FOV calculation) class.\r\n */\r\nexport default class Explorer {\r\n\t/**\r\n\t * Create a Explorer.\r\n\t * @param {Function} isTransparent - callback for identify tile.\r\n\t */\r\n\tconstructor(isTransparent) {\r\n\t\tif (isTransparent instanceof Function) {\r\n\t\t\tthis._isTransparent = isTransparent;\r\n\t\t} else {\r\n\t\t\tthrow new TypeError(`Explorer.calculate: ${this._isTransparent} is not a Function`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get line on a grid. Based on Bresenham's line algorithm.\r\n\t * @param {Point} point0 - Object of class Point, start position.\r\n\t * @param {Point} point1 - Object of class Point, end position.\r\n\t * @private\r\n\t */\r\n\t_getPointsOfLine (point0, point1) {\r\n\t\tlet dx = point1.x - point0.x,\r\n\t\t\tdy = point1.y - point0.y,\r\n\t\t\tnx = Math.abs(dx),\r\n\t\t\tny = Math.abs(dy),\r\n\t\t\tsx = (dx > 0) ? 1 : -1,\r\n\t\t\tsy = (dy > 0) ? 1 : -1,\r\n\t\t\tp = new Point(point0.x, point0.y),\r\n\t\t\tpoints = [new Point(p.x, p.y)];\r\n\t\tfor (let ix = 0, iy = 0; ix < nx || iy < ny;) {\r\n\t\t\tif ((0.5 + ix) / nx == (0.5 + iy) / ny) {\r\n\t\t\t\tp.x += sx;\r\n\t\t\t\tp.y += sy;\r\n\t\t\t\tix++;\r\n\t\t\t\tiy++;\r\n\t\t\t} else if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\r\n\t\t\t\tp.x += sx;\r\n\t\t\t\tix++;\r\n\t\t\t} else {\r\n\t\t\t\tp.y += sy;\r\n\t\t\t\tiy++;\r\n\t\t\t}\r\n\t\t\tpoints.push(new Point(p.x, p.y));\r\n\t\t}\r\n\t\treturn points;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate FOV.\r\n\t * @param {number} centerX The x position of center.\r\n\t * @param {number} centerY The y position of center.\r\n\t * @param {number} radius Radius of view.\r\n\t * @param {Function} checkExplored Called if tile is explored.\r\n\t */\r\n\tcalculate(centerX, centerY, radius, checkExplored) {\r\n\t\tthis.checkArguments(...arguments);\r\n\t\tconst squareRaduis = Math.pow(radius, 2),\r\n\t\t\tcenter = new Point(centerX, centerY),\r\n\t\t\tminX = center.x - radius,\r\n\t\t\tmaxX = center.x + radius,\r\n\t\t\tminY = center.y - radius,\r\n\t\t\tmaxY = center.y + radius;\r\n\r\n\t\t// check floors in radius\r\n\t\tfor (let y = minY; y <= maxY; y++) {\r\n\t\t\tfor (let x = minX; x <= maxX; x++) {\r\n\t\t\t\tif (y === minY || y === maxY || x === minX || x === maxX) {\r\n\t\t\t\t\t// check line of sight\r\n\t\t\t\t\tconst line = this._getPointsOfLine(center, new Point(x, y));\r\n\t\t\t\t\tfor (let i = 0; i < line.length; i++) {\r\n\t\t\t\t\t\tlet tile = line[i],\r\n\t\t\t\t\t\t\tsquareDistance = Math.pow(center.x - tile.x, 2) + Math.pow(center.y - tile.y, 2);\r\n\t\t\t\t\t\tif (squareDistance <= squareRaduis) {\r\n\t\t\t\t\t\t\tif (!this._isTransparent(tile.x, tile.y) ) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcheckExplored(tile.x, tile.y);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcheckArguments (centerX, centerY, radius, checkExplored) {\r\n\t\tif (isNaN(centerX) || isNaN(centerY) || isNaN(radius)) {\r\n\t\t\tthrow new TypeError(`Explorer.calculate: first three arguments must be a number`);\r\n\t\t}\r\n\t\tif (!(checkExplored instanceof Function)) {\r\n\t\t\tthrow new TypeError(`Explorer.calculate: fourth argument must be a function`);\r\n\t\t}\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\n/**\r\n * Represents a Rectangle\r\n * @extends Point\r\n */\r\nexport default class Rectangle extends Point {\r\n\t/**\r\n\t * Create a Rectangle.\r\n\t * @param {number} x - Left border position of rectangle.\r\n\t * @param {number} y - Top border position of rectangle.\r\n\t * @param {number} width - Width of rectangle.\r\n\t * @param {number} height - Height of rectangle.\r\n\t */\r\n\tconstructor(x, y, width, height) {\r\n\t\tsuper(x, y);\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\tstatic create (object) {\r\n\t\tobject = object || {};\r\n\t\treturn new Rectangle(\r\n\t\t\tobject.x,\r\n\t\t\tobject.y,\r\n\t\t\tobject.width,\r\n\t\t\tobject.height,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get width of Rectangle.\r\n\t * @return {number} The width of Rectangle.\r\n\t */\r\n\tget width() {\r\n\t\treturn Number(this._width) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set width of Rectangle.\r\n\t * @param {number} The Width of Rectangle.\r\n\t */\r\n\tset width(value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._width = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get height of Rectangle.\r\n\t * @return {number} The height of Rectangle.\r\n\t */\r\n\tget height() {\r\n\t\treturn Number(this._height) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set height of Rectangle.\r\n\t * @param {number} The height of Rectangle.\r\n\t */\r\n\tset height (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._height = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get top of Rectangle.\r\n\t * @return {number} The top border of Rectangle.\r\n\t */\r\n\tget top () {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Get right of Rectangle.\r\n\t * @return {number} The right border of Rectangle.\r\n\t */\r\n\tget right () {\r\n\t\treturn this.x + this.width;\r\n\t}\r\n\r\n\t/**\r\n\t * Get bottom of Rectangle.\r\n\t * @return {number} The bottom border of Rectangle.\r\n\t */\r\n\tget bottom () {\r\n\t\treturn this.y + this.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Get left of Rectangle.\r\n\t * @return {number} The left border of Rectangle.\r\n\t */\r\n\tget left () {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Get center of Rectangle.\r\n\t * @return {Point} Point with coordinates to center of Rectangle.\r\n\t */\r\n\tget center () {\r\n\t\treturn new Point(\r\n\t\t\tthis.x + (this.width / 2),\r\n\t\t\tthis.y + (this.height / 2)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Check collides with other Rectangle.\r\n\t * @param {object} rectangle - Object of class Rectangle.\r\n\t * @return {boolean} The boolean.\r\n\t */\r\n\tcollides (rectangle) {\r\n\t\tlet result = false;\r\n\t\tif (\r\n\t\t\trectangle.x <= this.x + this.width\r\n\t\t\t&& rectangle.x + rectangle.width >= this.x\r\n\t\t\t&& rectangle.y <= this.y + this.height\r\n\t\t\t&& rectangle.height + rectangle.y >= this.y\r\n\t\t) {\r\n\t\t\tresult = true;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tforEachPoint (callback) {}\r\n}\r\n\r\nwindow.Rectangle = Rectangle;\r\n","import PRNG from './PRNG';\r\nimport Point from './Point';\r\nimport Rectangle from './Rectangle';\r\n\r\n/**\r\n * Represents a Dungeon class.\r\n */\r\nexport default class Dungeon {\r\n\t/**\r\n\t * Create a dungeon.\r\n\t * @param {Object} [options] - Dungeon generation options.\r\n\t * @param {number} options.seed - The seed to pseudorandom number generator.\r\n\t * @param {number} options.roomsAmount - The amount of rooms.\r\n\t * @param {number} options.roomMinSize - Min size of room.\r\n\t * @param {number} options.roomMaxSize - Max size of room.\r\n\t * @param {number} options.corridorMinLength - Min length of corridors.\r\n\t * @param {number} options.corridorMaxLength - Max length of corridors.\r\n\t * @param {number} options.corridorComplexity - Complexity corridors.\r\n\t */\r\n\tconstructor (options) {\r\n\t\toptions = options || {};\r\n\t\t// @TODO this.map = new Rectangle()?\r\n\t\tthis._tiles = [];\r\n\t\tthis._rooms = [];\r\n\t\tthis._corridors = [];\r\n\t\tthis._prng = new PRNG(options.seed);\r\n\t\tthis._options = this.validateOptions(options);\r\n\t\tthis.generate();\r\n\t}\r\n\r\n\tvalidateOptions (options) {\r\n\t\toptions = options || {};\r\n\t\tconst resultOptions = {};\r\n\t\tObject.keys(this.defaultOptions).forEach(key => {\r\n\t\t\tconst option = options[key];\r\n\t\t\tif (isNaN(option) || !isFinite(option) || option < 1) {\r\n\t\t\t\tresultOptions[key] = parseInt(this.defaultOptions[key], 10) || 1;\r\n\t\t\t} else {\r\n\t\t\t\tresultOptions[key] = parseInt(option, 10);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn resultOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Get default options.\r\n\t * @readonly\r\n\t */\r\n\tget defaultOptions () {\r\n\t\treturn {\r\n\t\t\tseed: Math.random(),\r\n\t\t\troomsAmount: 7,\r\n\t\t\troomMinSize: 5,\r\n\t\t\troomMaxSize: 10,\r\n\t\t\tcorridorMinLength: 3,\r\n\t\t\tcorridorMaxLength: 7,\r\n\t\t\tcorridorComplexity: 3,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of rooms.\r\n\t * @readonly\r\n\t * @return {array} List of rooms.\r\n\t */\r\n\tget rooms () {\r\n\t\treturn this._rooms.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of corridors.\r\n\t * @readonly\r\n\t * @return {array} List of corridors.\r\n\t */\r\n\tget corridors () {\r\n\t\treturn this._corridors.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of all builds.\r\n\t * @readonly\r\n\t * @return {array} List of builds (rooms & corridors).\r\n\t */\r\n\tget builds () {\r\n\t\treturn this.rooms.concat(this.corridors);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the width of dungeon.\r\n\t * @readonly\r\n\t * @return {number} The dungeon width (number of tiles).\r\n\t */\r\n\tget width () {\r\n\t\treturn Array.isArray(this._tiles[0]) ? this._tiles[0].length : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the height of dungeon.\r\n\t * @readonly\r\n\t * @return {number} The dungeon height (number of tiles).\r\n\t */\r\n\tget height () {\r\n\t\treturn Array.isArray(this._tiles) ? this._tiles.length : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Run callback for each tile of generated map.\r\n\t * @param {Function} callback Function called fo each tile.\r\n\t */\r\n\tforEachTile (callback) {\r\n\t\tif (this._tiles && callback instanceof Function) {\r\n\t\t\tfor (var y = 0; y < this._tiles.length; y++) {\r\n\t\t\t\tfor (var x = 0; x < this._tiles[y].length; x++) {\r\n\t\t\t\t\tcallback(x, y, this._tiles[y][x]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tisFloor () {\r\n\t\treturn !this.isWall.call(this, ...arguments);\r\n\t}\r\n\r\n\t/**\r\n\t * Get type of tile.\r\n\t * @param {number} x - The y of tile position.\r\n\t * @param {number} y - The x of tile position.\r\n\t * @return {boolean}\r\n\t */\r\n\tisWall (x, y) {\r\n\t\tlet result = false;\r\n\t\tif (Array.isArray(this._tiles[y]) && this._tiles[y].hasOwnProperty(x)) {\r\n\t\t\tresult = !this._tiles[y][x];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Generate dungeon. Generate arrays of rooms and corridors, matrix of tiles\r\n\t */\r\n\tgenerate () {\r\n\t\tthis._generateBuilds();\r\n\t\tthis._optimizeBuilds();\r\n\t\tthis._createMap();\r\n\t}\r\n\r\n\t/**\r\n\t * Generate builds (rooms & corridors).\r\n\t * @private\r\n\t * @TODO need decomposition!\r\n\t */\r\n\t_generateBuilds () {\r\n\t\tconst random = (max, min) => Math.floor(this._prng.generate(min, max));\r\n\t\tconst {\r\n\t\t\troomsAmount,\r\n\t\t\troomMinSize,\r\n\t\t\troomMaxSize,\r\n\t\t\tcorridorMinLength,\r\n\t\t\tcorridorMaxLength\r\n\t\t} = this._options;\r\n\r\n\t\t// set default\r\n\t\tthis._rooms = [];\r\n\t\tthis._corridors = [];\r\n\r\n\t\t// add first room\r\n\t\tthis._rooms.push(new Rectangle(\r\n\t\t\t1,\r\n\t\t\t1,\r\n\t\t\trandom(roomMinSize, roomMaxSize),\r\n\t\t\trandom(roomMinSize, roomMaxSize),\r\n\t\t));\r\n\t\tthis._rooms[0].children = [];\r\n\r\n\t\t// main loop\r\n\t\tlet lastType = 'room';\r\n\t\twhile (this._rooms.length < roomsAmount) {\r\n\t\t\t// configure new room and corridor relative to random room from list\r\n\t\t\tconst lastRoom = this._rooms[random(0, this._rooms.length - 1)],\r\n\t\t\t\tnewRoomWidth = random(roomMinSize, roomMaxSize),\r\n\t\t\t\tnewRoomHeight = random(roomMinSize, roomMaxSize),\r\n\t\t\t\tnewRoom = new Rectangle(0, 0, newRoomWidth, newRoomHeight),\r\n\t\t\t\tnewCorridorLength = random(corridorMinLength, corridorMaxLength),\r\n\t\t\t\tnewCorridor = new Rectangle(0, 0, 1, 1),\r\n\t\t\t\tdirection = parseInt(Math.random() * 4, 10);\r\n\t\t\tlastRoom.children.push(newCorridor);\r\n\t\t\tnewRoom.parent = newCorridor;\r\n\t\t\tnewRoom.children = [];\r\n\t\t\tnewCorridor.parent = lastRoom;\r\n\t\t\tnewCorridor.children = [newRoom];\r\n\r\n\t\t\t// configure new corridor and room\r\n\t\t\tif (direction === 0 || direction === 2) {\r\n\t\t\t\tnewRoom.y = lastRoom.bottom - 1 - random(\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tMath.abs(newRoom.height + lastRoom.height) - 1,\r\n\t\t\t\t);\r\n\t\t\t\tnewCorridor.y = random(\r\n\t\t\t\t\tMath.max(lastRoom.top, newRoom.top),\r\n \t\t\t\t\tMath.min(lastRoom.bottom, newRoom.bottom) - 1\r\n\t\t\t\t);\r\n\t\t\t\tnewCorridor.width = newCorridorLength;\r\n\t\t\t} else {\r\n\t\t\t\tnewRoom.x = lastRoom.right - 1 - random(\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tMath.abs(newRoom.width + lastRoom.width) - 1,\r\n\t\t\t\t);\r\n\t\t\t\tnewCorridor.height = newCorridorLength;\r\n\t\t\t\tnewCorridor.x = random(\r\n\t\t\t\t\tMath.max(lastRoom.left, newRoom.left),\r\n\t\t\t\t\tMath.min(lastRoom.right, newRoom.right),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// configure new corridor and room\r\n\t\t\tif (direction === 0) { // left\r\n\t\t\t\tnewRoom.x = lastRoom.right + newCorridorLength;\r\n\t\t\t\tnewCorridor.x = lastRoom.right;\r\n\t\t\t} else if (direction === 1) { // bottom\r\n\t\t\t\tnewRoom.y = lastRoom.bottom + newCorridorLength;\r\n\t\t\t\tnewCorridor.y = lastRoom.bottom;\r\n\t\t\t} else if (direction === 2) { // right\r\n\t\t\t\tnewRoom.x = lastRoom.left - newCorridorLength - newRoom.width;\r\n\t\t\t\tnewCorridor.x = lastRoom.left - newCorridor.width;\r\n\t\t\t} else { // top\r\n\t\t\t\tnewRoom.y = lastRoom.top - newCorridorLength - newRoom.height;\r\n\t\t\t\tnewCorridor.y = lastRoom.top - newCorridor.height;\r\n\t\t\t}\r\n\r\n\t\t\t// if new builds is suitable - save it\r\n\t\t\tif (this._isSuitableBuilds(newRoom, newCorridor)) {\r\n\t\t\t\tthis._rooms.push(newRoom);\r\n\t\t\t\tthis._corridors.push(newCorridor);\r\n\t\t\t} else {\r\n\t\t\t\tlastRoom.children = lastRoom.children.filter(child => child !== newCorridor);\r\n\t\t\t\tnewCorridor.children = newCorridor.children.filter(child => child !== newRoom);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t_isSuitableBuilds () {\r\n\t\tconst newBuilds = Array.from(arguments);\r\n\t\treturn newBuilds.every(newBuild => {\r\n\t\t\treturn !this.builds\r\n\t\t\t\t.filter(build => {\r\n\t\t\t\t\treturn build.parent !== newBuild.parent\r\n\t\t\t\t\t&& build !== newBuild.parent\r\n\t\t\t\t\t&& build !== newBuild.children\r\n\t\t\t\t\t&& !build.children.includes(newBuild.parent)\r\n\t\t\t\t})\r\n\t\t\t\t.some(build => this._isCollide(build, newBuild));\r\n\t\t});\r\n\t}\r\n\r\n\t_isCollide (build1, build2) {\r\n\t\treturn build1.collides(build2)\r\n\t}\r\n\r\n\t/**\r\n\t * Translates all builds to positive coordinates.\r\n\t * @private\r\n\t */\r\n\t_optimizeBuilds () {\r\n\t\t// leftmost top point search\r\n\t\tconst topLeft = this._getTopLeft();\r\n\r\n\t\t// translate rooms to leftmost top position (1, 1)\r\n\t\tif (topLeft.x < 1) {\r\n\t\t\tthis._translateBuilds(1 - topLeft.x, 0);\r\n\t\t}\r\n\t\tif (topLeft.y < 1) {\r\n\t\t\tthis._translateBuilds(0, 1 - topLeft.y);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the point of leftmost top position among all builds.\r\n\t * @private\r\n\t * @return {Object} The point.\r\n\t */\r\n\t_getTopLeft () {\r\n\t\tconst topLeft = new Point(Infinity, Infinity);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tif (build.x < topLeft.x) {\r\n\t\t\t\ttopLeft.x = build.x;\r\n\t\t\t}\r\n\t\t\tif (build.y < topLeft.y) {\r\n\t\t\t\ttopLeft.y = build.y;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn topLeft;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the point of rightmost bottom position among all builds.\r\n\t * @private\r\n\t * @return {Object} The point.\r\n\t */\r\n\t_getBottomRight () {\r\n\t\tconst bottomRight = new Point(-Infinity, -Infinity);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tif (build.right > bottomRight.x) {\r\n\t\t\t\tbottomRight.x = build.right;\r\n\t\t\t}\r\n\t\t\tif (build.bottom > bottomRight.y) {\r\n\t\t\t\tbottomRight.y = build.bottom;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn bottomRight;\r\n\t}\r\n\r\n\t/**\r\n\t * Translate all builds.\r\n\t * @private\r\n\t * @param {number} offsetX - Offset by x axis.\r\n\t * @param {number} offsetY - Offset by y axis.\r\n\t */\r\n\t_translateBuilds (offsetX, offsetY) {\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tbuild.x += offsetX;\r\n\t\t\tbuild.y += offsetY;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Create map: generate array of arrays of tiles.\r\n\t * @private\r\n\t */\r\n\t_createMap () {\r\n\t\tlet bottomRight = this._getBottomRight();\r\n\t\tthis._fillMap(bottomRight.x + 2, bottomRight.y + 2);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tthis._fillRectangle(build.x, build.y, build.width, build.height);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Fill map: generate matrix (array of arrays) with needed size.\r\n\t * @private\r\n\t * @param {number} width - The width of matrix.\r\n\t * @param {number} height - The height of matrix.\r\n\t * @TODO new Rectangle\r\n\t */\r\n\t_fillMap (width, height) {\r\n\t\t// set default\r\n\t\tthis._tiles = [];\r\n\r\n\t\t// this._tiles[y][x] === true (floor) || false (wall)\r\n\t\tfor (var y = 0; y < height; y++) {\r\n\t\t\tthis._tiles.push([]);\r\n\t\t\tfor (var x = 0; x < width; x++) {\r\n\t\t\t\tthis._tiles[y].push(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Fill rectagle: fill rectangle area on map.\r\n\t * @private\r\n\t * @param {number} startX - Left border position of rectangle.\r\n\t * @param {number} startY - Top border position of rectangle.\r\n\t * @param {number} width - Width of rectangle.\r\n\t * @param {number} height - Height of rectangle.\r\n\t * @TODO move to Rectangle (forEachPoint)?\r\n\t */\r\n\t_fillRectangle(startX, startY, width, height) {\r\n\t\tfor (var y = startY; y <= startY + height - 1; y++) {\r\n\t\t\tfor (var x = startX; x <= startX + width - 1; x++) {\r\n\t\t\t\tthis._tiles[y][x] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import PRNG from './PRNG';\r\nimport Dungeon from './Dungeon';\r\nimport Explorer from './Explorer';\r\nimport Pathfinder from './Pathfinder';\r\n\r\n/**\r\n * Represents a toolkit for development roguelike games.\r\n */\r\nexport default class Rglk {\r\n\t/**\r\n\t * Create a roguelike toolkit.\r\n\t */\r\n\tconstructor () {\r\n\t\tObject.assign(this, {\r\n\t\t\tPRNG,\r\n\t\t\tDungeon,\r\n\t\t\tExplorer,\r\n\t\t\tPathfinder,\r\n\t\t});\r\n\t}\r\n}\r\n","import Rglk from './Rglk';\r\n\r\nconst rglk = new Rglk();\r\n\r\nexport default rglk;\r\nexport const PRNG = rglk.PRNG;\r\nexport const Dungeon = rglk.Dungeon;\r\nexport const Explorer = rglk.Explorer;\r\nexport const Pathfinder = rglk.Pathfinder;\r\n","import rglk from 'rglk';\r\n\r\ninitSection('.js-section-dungeon', canvas => {\r\n\tconst dungeon = new rglk.Dungeon({\r\n\t\troomsAmount: 24,\r\n\t\troomMinSize: 3,\r\n\t\troomMaxSize: 10,\r\n\t\tcorridorMinLength: 1,\r\n\t\tcorridorMaxLength: Math.random() * 10,\r\n\t\tseed: Math.random(),\r\n\t});\r\n\tdraw(canvas, {\r\n\t\tdungeon,\r\n\t\troomColor: '#445',\r\n\t\tcorridorColor: '#223',\r\n\t\tneedRoomsNumbers: true,\r\n\t});\r\n});\r\n\r\ninitSection('.js-section-labyrinth', canvas => {\r\n\tconst dungeon = new rglk.Dungeon({\r\n\t\troomsAmount: 128,\r\n\t\troomMinSize: 1,\r\n\t\troomMaxSize: 1,\r\n\t\tcorridorMinLength: 1,\r\n\t\tcorridorMaxLength: 1,\r\n\t\tseed: Math.random(),\r\n\t});\r\n\tdraw(canvas, {\r\n\t\tdungeon,\r\n\t\troomColor: '#445',\r\n\t\tcorridorColor: '#445',\r\n\t});\r\n});\r\n\r\ninitSection('.js-section-explorer', canvas => {\r\n\tconst dungeon = new rglk.Dungeon({\r\n\t\t\troomsAmount: 6,\r\n\t\t\troomMinSize: 3,\r\n\t\t\troomMaxSize: 12,\r\n\t\t\tcorridorMinLength: 1,\r\n\t\t\tcorridorMaxLength: 1,\r\n\t\t\tseed: Math.random(),\r\n\t\t}),\r\n\t\texplorer = new rglk.Explorer((x, y) => !dungeon.isWall(x, y)),\r\n\t\tfov = [];\r\n\texplorer.calculate(\r\n\t\tparseInt(dungeon.rooms[0].center.x, 10),\r\n\t\tparseInt(dungeon.rooms[0].center.y, 10),\r\n\t\t16,\r\n\t\t(x, y) => fov.push({x: x, y: y}),\r\n\t);\r\n\tdraw(canvas, {\r\n\t\tfov,\r\n\t\tdungeon,\r\n\t\tradius: 16,\r\n\t\tcenter: dungeon.rooms[0].center,\r\n\t});\r\n});\r\n\r\ninitSection('.js-section-pathfinder', canvas => {\r\n\tconst dungeon = new rglk.Dungeon({\r\n\t\t\troomsAmount: 24,\r\n\t\t\troomMinSize: 4,\r\n\t\t\troomMaxSize: 12,\r\n\t\t\tcorridorMinLength: 1,\r\n\t\t\tcorridorMaxLength: 5,\r\n\t\t\tseed: Math.random(),\r\n\t\t}),\r\n\t\tpathfinder = new rglk.Pathfinder((x, y) => dungeon.isFloor(x, y));\r\n\tconst path = pathfinder.search(\r\n\t\tparseInt(dungeon.rooms[0].center.x, 10),\r\n\t\tparseInt(dungeon.rooms[0].center.y, 10),\r\n\t\tparseInt(dungeon.rooms[dungeon.rooms.length - 1].center.x, 10),\r\n\t\tparseInt(dungeon.rooms[dungeon.rooms.length - 1].center.y, 10),\r\n\t);\r\n\tdraw(canvas, {\r\n\t\tpath,\r\n\t\tdungeon,\r\n\t});\r\n});\r\n\r\nfunction initSection (sectionSelector, render) {\r\n\tconst section = document.querySelector(sectionSelector);\r\n\tif (section) {\r\n\t\tconst canvas = section.querySelector('canvas'),\r\n\t\t\tbutton = section.querySelector('.js-reload-button')\r\n\t\tif (canvas) {\r\n\t\t\tcanvas.width = canvas.clientWidth;\r\n\t\t\tcanvas.height = canvas.width / 4 * 3;\r\n\t\t\trender(canvas);\r\n\t\t}\r\n\t\tif (button) {\r\n\t\t\tbutton.addEventListener('click', () => render(canvas));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction draw (canvas, data) {\r\n\tdata = data || {};\r\n\tconst context = canvas.getContext('2d'), {\r\n\t\tfov,\r\n\t\tpath,\r\n\t\tdungeon,\r\n\t} = data;\r\n\tdata.tileSize = calculateTileSize(dungeon, canvas);\r\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\r\n\tif (dungeon) {\r\n\t\tdrawMap(context, data);\r\n\t\tif (fov) {\r\n\t\t\tdrawFOV(context, data);\r\n\t\t}\r\n\t\tif (path) {\r\n\t\t\tdrawPath(context, data);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction drawMap (context, data) {\r\n\tdata = data || {};\r\n\tconst {\r\n\t\tdungeon,\r\n\t\troomColor = '#445',\r\n\t\tcorridorColor = '#223',\r\n\t\ttileSize,\r\n\t} = data;\r\n\r\n\t// draw rooms\r\n\tdungeon.rooms.forEach((room, index) => {\r\n\t\tcontext.fillStyle = roomColor;\r\n\t\tcontext.fillRect(\r\n\t\t\troom.x * tileSize,\r\n\t\t\troom.y * tileSize,\r\n\t\t\troom.width * tileSize,\r\n\t\t\troom.height * tileSize,\r\n\t\t);\r\n\t\tif (data.needRoomsNumbers) {\r\n\t\t\tcontext.fillStyle = 'rgba(255,255,255,.5)';\r\n\t\t\tcontext.textBaseline = 'middle';\r\n\t\t\tcontext.textAlign = 'center';\r\n\t\t\tcontext.font = `${tileSize}px Arial`;\r\n\t\t\tcontext.fillText(\r\n\t\t\t\tindex,\r\n\t\t\t\troom.center.x * tileSize,\r\n\t\t\t\troom.center.y * tileSize,\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n\r\n\t// draw corridors\r\n\tdungeon.corridors.forEach(corridor => {\r\n\t\tcontext.fillStyle = corridorColor;\r\n\t\tcontext.fillRect(\r\n\t\tcorridor.x * tileSize,\r\n\t\tcorridor.y * tileSize,\r\n\t\tcorridor.width * tileSize,\r\n\t\tcorridor.height * tileSize,\r\n\t\t);\r\n\t});\r\n}\r\n\r\nfunction drawFOV (context, data) {\r\n\tconst {\r\n\t\tfov,\r\n\t\tcenter,\r\n\t\tradius,\r\n\t\tdungeon,\r\n\t\ttileSize,\r\n\t} = data;\r\n\tfov.forEach(tile => {\r\n\t\tconst distance = center.distanceTo(tile),\r\n\t\t\tproportion = 1 - (distance / radius);\r\n\t\tcontext.fillStyle = `rgba(255,210,150,${proportion})`;\r\n\t\tcontext.globalAlpha = 0.1;\r\n\t\tcontext.fillRect(\r\n\t\t\ttile.x * tileSize,\r\n\t\t\ttile.y * tileSize,\r\n\t\t\ttileSize,\r\n\t\t\ttileSize,\r\n\t\t);\r\n\t\tcontext.globalAlpha = 1;\r\n\t});\r\n}\r\n\r\nfunction drawPath (context, data) {\r\n\tconst {\r\n\t\tpath,\r\n\t\tdungeon,\r\n\t\ttileSize,\r\n\t} = data;\r\n\tcontext.strokeStyle = '#0e0';\r\n\tcontext.lineWidth = Math.ceil(tileSize / 3);\r\n\tif (path.length) {\r\n\t\tcontext.beginPath();\r\n\t\tcontext.moveTo(\r\n\t\t\tpath[0].x * tileSize + (tileSize / 2),\r\n\t\t\tpath[0].y * tileSize + (tileSize / 2)\r\n\t\t);\r\n\t\tpath.forEach(point => {\r\n\t\t\tcontext.lineTo(\r\n\t\t\t\tpoint.x * tileSize + (tileSize / 2),\r\n\t\t\t\tpoint.y * tileSize + (tileSize / 2)\r\n\t\t\t);\r\n\t\t});\r\n\t\tcontext.stroke();\r\n\t\tcontext.closePath();\r\n\t}\r\n}\r\n\r\nfunction calculateTileSize (dungeon, canvas) {\r\n\tconst canvasMinSide = Math.min(canvas.width, canvas.height),\r\n\t\tdungeonMaxSide = Math.max(dungeon.width, dungeon.height);\r\n\treturn Math.floor(canvasMinSide / dungeonMaxSide) || 8;\r\n}\r\n"],"sourceRoot":""}