{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/library/js/Point.js","webpack:///./src/library/js/PRNG.js","webpack:///./src/library/js/Node.js","webpack:///./src/library/js/Pathfinder.js","webpack:///./src/library/js/Explorer.js","webpack:///./src/library/js/Rectangle.js","webpack:///./src/library/js/Dungeon.js","webpack:///./src/library/js/index.js","webpack:///./src/demo/js/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Point","x","y","_classCallCheck","this","point","Math","sqrt","pow","Number","_x","isNaN","_y","PRNG","seed","min","max","_updateSeed","_seed","isFinite","random","_Point2","Node","options","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","g","h","parent","path","currentNode","push","reverse","_g","_h","_parent","node","_Node","Pathfinder","isOpen","Function","TypeError","_isOpen","x1","y1","x2","y2","start","end","unvisitedNodes","visitedNodes","resultPath","_loop","currentNodeIndex","forEach","item","f","splice","isEqualTo","getPathToRoot","neighbors","_getNeighbors","_loop2","neighbor","find","_getHeuristic","length","abs","_Point","Explorer","isTransparent","_isTransparent","centerX","centerY","radius","checkExplored","visiblePoints","_checkArguments","apply","arguments","squareRadius","center","minX","maxX","minY","maxY","canCheck","includes","points","getPointsOfLine","line","values","point0","point1","dx","dy","nx","ny","sx","sy","ix","iy","Rectangle","width","height","rectangle","result","callback","_width","_height","Dungeon","_tiles","_rooms","_corridors","_prng","_options","validateOptions","generate","resultOptions","keys","defaultOptions","option","parseInt","isWall","Array","isArray","_generateBuilds","_optimizeBuilds","_createMap","_this2","floor","roomsAmount","roomMinSize","roomMaxSize","corridorMinLength","corridorMaxLength","children","lastRoom","newRoomWidth","newRoomHeight","newRoom","newCorridorLength","newCorridor","direction","bottom","top","right","left","_isSuitableBuilds","filter","child","_this3","_len","newBuilds","_key","every","newBuild","_isSuitableBuild","builds","build","some","collides","topLeft","_getTopLeft","_translateBuilds","Infinity","bottomRight","offsetX","offsetY","_this4","_getBottomRight","_fillMap","_fillRectangle","startX","startY","corridorComplexity","slice","rooms","concat","corridors","rglk","freeze","_rglk","initSection","canvas","draw","dungeon","roomColor","corridorColor","needRoomsNumbers","mousePosition","sectionSelector","render","section","document","querySelector","button","clientWidth","addEventListener","data","context","getContext","_data","fov","tileSize","calculateTileSize","clearRect","_data2","_data2$roomColor","undefined","_data2$corridorColor","room","index","fillStyle","fillRect","textBaseline","textAlign","font","fillText","corridor","drawMap","tile","distance","proportion","globalAlpha","drawFOV","strokeStyle","lineWidth","ceil","beginPath","moveTo","lineTo","stroke","closePath","drawPath","canvasMinSide","dungeonMaxSide","explorer","isFloor","calculate","onmousemove","event","Event","rect","target","getBoundingClientRect","clientX","clientY","getMousePosition","inDungeonPosition","round","newFov","search"],"mappings":"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","file":"js/demo.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/**\r\n * Represents a 2D Point.\r\n */\r\nexport default class Point {\r\n\t/**\r\n\t * Create a Point.\r\n\t * @param {number} x - the x of point.\r\n\t * @param {number} y - the y of point.\r\n\t */\r\n\tconstructor (x, y) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Get x value.\r\n\t * @return {number} The x value.\r\n\t */\r\n\tget x () {\r\n\t\treturn Number(this._x) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set x value.\r\n\t * @param {number} The x value.\r\n\t */\r\n\tset x (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._x = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get y value.\r\n\t * @return {number} The y value.\r\n\t */\r\n\tget y () {\r\n\t\treturn Number(this._y) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set y value.\r\n\t * @param {number} The y value.\r\n\t */\r\n\tset y (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._y = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get distance to a point.\r\n\t * @param {Point} Object of Point class.\r\n\t * @return {number|NaN} The distance.\r\n\t */\r\n\tdistanceTo (point) {\r\n\t\tpoint = point || {};\r\n\t\treturn Math.sqrt((point.x - this.x)**2 + (point.y - this.y)**2);\r\n\t}\r\n\r\n\t/**\r\n\t * Check that argument point is equal to self.\r\n\t * @param  {Object} point Object with x and y properties.\r\n\t * @return {boolean} Are points is equal?\r\n\t */\r\n\tisEqualTo (point) {\r\n\t\tpoint = point || {};\r\n\t\treturn point.x === this.x && point.y === this.y;\r\n\t}\r\n}\r\n","/**\r\n * Represents a Pseudo Random Number Generator.\r\n * Thanks for author of this article: http://indiegamr.com/generate-repeatable-random-numbers-in-js/\r\n */\r\nexport default class PRNG {\r\n\t/**\r\n\t * Create a PRNG.\r\n\t * @param  {number} seed Seed - number which will the base for generate numbers.\r\n\t */\r\n\tconstructor (seed) {\r\n\t\tthis.seed = seed;\r\n\t}\r\n\r\n\t/**\r\n\t * Get a seed\r\n\t * @return {number} Seed.\r\n\t */\r\n\tget seed () {\r\n\t\treturn this._seed;\r\n\t}\r\n\r\n\t/**\r\n\t * Set a seed.\r\n\t * @param {number} value Finite number.\r\n\t */\r\n\tset seed (value) {\r\n\t\tthis._seed = isNaN(value) || !isFinite(value)\r\n\t\t\t? Math.random()\r\n\t\t\t: Number(value);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns random number between min and max.\r\n\t * @param  {number} [min=0] Lower bound.\r\n\t * @param  {number} [max=1] Upper bound.\r\n\t * @return {number} Float between min and max.\r\n\t */\r\n\tgenerate (min, max) {\r\n\t\tmax = isNaN(max) ? 1 : Number(max);\r\n\t\tmin = isNaN(min) ? 0 : Number(min);\r\n\t\tconst random = this._updateSeed() / 233280;\r\n\t\treturn min + random * (max - min);\r\n\t}\r\n\r\n\t/**\r\n\t * Update seed.\r\n\t * @return {number} Updated seed.\r\n\t */\r\n\t_updateSeed () {\r\n\t\treturn this._seed = (this._seed * 9301 + 49297) % 233280;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\nexport default class Node extends Point {\r\n\tconstructor(options) {\r\n\t\toptions = options || {};\r\n\t\tsuper(options.x, options.y);\r\n\t\tthis.g = options.g;\r\n\t\tthis.h = options.h;\r\n\t\tthis.parent = options.parent;\r\n\t}\r\n\r\n\tget g () {\r\n\t\treturn Number(this._g) || 0;\r\n\t}\r\n\r\n\tset g (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._g = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\tget h () {\r\n\t\treturn Number(this._h) || 0;\r\n\t}\r\n\r\n\tset h (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._h = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\tget parent () {\r\n\t\treturn this._parent instanceof Node\r\n\t\t\t? this._parent\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tset parent (node) {\r\n\t\tif (node instanceof Node) {\r\n\t\t\tthis._parent = node;\r\n\t\t}\r\n\t}\r\n\r\n\tget f () {\r\n\t\treturn (this.g + this.h);\r\n\t}\r\n\r\n\tgetPathToRoot () {\r\n\t\tconst path = [];\r\n\t\tlet currentNode = this;\r\n\t\twhile (currentNode.parent) {\r\n\t\t\tpath.push(currentNode);\r\n\t\t\tcurrentNode = currentNode.parent;\r\n\t\t}\r\n\t\treturn path.reverse();\r\n\t}\r\n}\r\n","import Node from './Node';\r\n\r\n/**\r\n * Represents a Pathfinder class.\r\n */\r\nexport default class Pathfinder {\r\n\t/**\r\n\t * Create a Pathfinder.\r\n\t * @param {Function} isOpen Callback, defines that point is open.\r\n\t */\r\n\tconstructor(isOpen) {\r\n\t\tif (isOpen instanceof Function) {\r\n\t\t\tthis._isOpen = isOpen;\r\n\t\t} else {\r\n\t\t\tthrow new TypeError('Pathfinder.constructor: first argument must be a function');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Search path between two points.\r\n\t * @param {number} x1 First point x.\r\n\t * @param {number} y1 First point y.\r\n\t * @param {number} x2 Second point x.\r\n\t * @param {number} y2 Second point y.\r\n\t * @return {Array} List of path points.\r\n\t * @TODO Make calculation can be async?\r\n\t */\r\n\tsearch(x1, y1, x2, y2) {\r\n\t\tlet start = new Node({\r\n\t\t\t\tx: x1,\r\n\t\t\t\ty: y1,\r\n\t\t\t}),\r\n\t\t\tend = new Node({\r\n\t\t\t\tx: x2,\r\n\t\t\t\ty: y2,\r\n\t\t\t}),\r\n\t\t\tunvisitedNodes = [start],\r\n\t\t\tvisitedNodes = [],\r\n\t\t\tresultPath = [];\r\n\r\n\t\t// main loop\r\n\t\twhile (unvisitedNodes.length) {\r\n\t\t\t// search in open list node with lowest value f = g + h\r\n\t\t\tlet currentNodeIndex = 0,\r\n\t\t\t\tcurrentNode = unvisitedNodes[0];\r\n\t\t\tunvisitedNodes.forEach((item, i) => {\r\n\t\t\t\tif (item.f < currentNode.f) {\r\n\t\t\t\t\tcurrentNode = item;\r\n\t\t\t\t\tcurrentNodeIndex = i;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// add found node to closed list, delete it from open list\r\n\t\t\tunvisitedNodes.splice(currentNodeIndex, 1);\r\n\t\t\tvisitedNodes.push(currentNode);\r\n\r\n\t\t\t// if current node is target then create path and break\r\n\t\t\tif (currentNode.isEqualTo(end)) {\r\n\t\t\t\tresultPath = currentNode.getPathToRoot();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tlet neighbors = this._getNeighbors(currentNode); // @TODO check length before run cycle\r\n\t\t\tfor (let i = 0; i < neighbors.length; i++) {\r\n\t\t\t\tlet neighbor = neighbors[i];\r\n\r\n\t\t\t\t// ignore neighbor if he in closed list\r\n\t\t\t\tif (visitedNodes.find(node => node.isEqualTo(neighbor))) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if neighbor not in open list, add him to open list, update h\r\n\t\t\t\tif (!unvisitedNodes.find(node => node.isEqualTo(neighbor))) {\r\n\t\t\t\t\tneighbor.h = this._getHeuristic(neighbor.x, neighbor.y, end.x, end.y);\r\n\t\t\t\t\tunvisitedNodes.push(neighbor);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn resultPath;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns heuristic value (Manhattan distance) between two nodes.\r\n\t * @readOnly\r\n\t * @param  {number} x1 First node x.\r\n\t * @param  {number} y1 First node y.\r\n\t * @param  {number} x2 Second node x.\r\n\t * @param  {number} y2 Second node y.\r\n\t * @return {number} heuristic value.\r\n\t */\r\n\t_getHeuristic (x1, y1, x2, y2) {\r\n\t\tconst d1 = Math.abs(x2 - x1),\r\n\t\t\td2 = Math.abs(y2 - y1);\r\n\t\treturn d1 + d2;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns list of node neighbors.\r\n\t * @readOnly\r\n\t * @param  {Node} node Node to get a neighbors.\r\n\t * @return {Array} List of neighbors.\r\n\t * @TODO move to Node class?\r\n\t */\r\n\t_getNeighbors (node) {\r\n\t\tlet neighbors = [];\r\n\t\tfor (let y = -1; y <= 1; y++) {\r\n\t\t\tfor (let x = -1; x <= 1; x++) {\r\n\t\t\t\t// if is not diagonal neighbor\r\n\t\t\t\tif (Math.abs(x + y) === 1) {\r\n\t\t\t\t\tif (this._isOpen(node.x + x, node.y + y)) {\r\n\t\t\t\t\t\tneighbors.push(new Node({\r\n\t\t\t\t\t\t\tx: node.x + x,\r\n\t\t\t\t\t\t\ty: node.y + y,\r\n\t\t\t\t\t\t\tg: node.g + 1,\r\n\t\t\t\t\t\t\tparent: node,\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn neighbors;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\n/**\r\n * Represents a Explorer (FOV calculation) class.\r\n */\r\nexport default class Explorer {\r\n\t/**\r\n\t * Create a Explorer.\r\n\t * @param {Function} isTransparent Callback which must determine that tile is transparent.\r\n\t */\r\n\tconstructor (isTransparent) {\r\n\t\tif (isTransparent instanceof Function) {\r\n\t\t\tthis._isTransparent = isTransparent;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of points in field of view.\r\n\t * @param {number} centerX The x position of center.\r\n\t * @param {number} centerY The y position of center.\r\n\t * @param {number} radius Radius of view.\r\n\t * @param {Function} [checkExplored] Called if tile is explored.\r\n\t * @return {Array} Visible points array.\r\n\t */\r\n\tcalculate (centerX, centerY, radius, checkExplored) {\r\n\t\tconst visiblePoints = {};\r\n\t\tif (this._checkArguments(...arguments)) {\r\n\t\t\tconst squareRadius = radius**2,\r\n\t\t\t\tcenter = new Point(centerX, centerY),\r\n\t\t\t\tminX = center.x - radius,\r\n\t\t\t\tmaxX = center.x + radius,\r\n\t\t\t\tminY = center.y - radius,\r\n\t\t\t\tmaxY = center.y + radius,\r\n\t\t\t\tcanCheck = checkExplored instanceof Function;\r\n\r\n\t\t\t// check floors in radius\r\n\t\t\tfor (let y = minY; y <= maxY; y++) {\r\n\t\t\t\tfor (let x = minX; x <= maxX; x++) {\r\n\t\t\t\t\t// if x or y equals to bound of square area\r\n\t\t\t\t\tif ([minX, maxX].includes(x) || [minY, maxY].includes(y)) {\r\n\t\t\t\t\t\tconst points = this.getPointsOfLine(center, new Point(x, y));\r\n\t\t\t\t\t\tline: for (let i = 0; i < points.length; i++) {\r\n\t\t\t\t\t\t\tconst point = points[i],\r\n\t\t\t\t\t\t\t\tsquareDistance = (center.x - point.x)**2 + (center.y - point.y)**2;\r\n\t\t\t\t\t\t\tif (squareDistance <= squareRadius && this._isTransparent(point.x, point.y)) {\r\n\t\t\t\t\t\t\t\tif (canCheck) {\r\n\t\t\t\t\t\t\t\t\tcheckExplored(point.x, point.y);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvisiblePoints[`${point.x}x${point.y}`] = point;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak line;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(visiblePoints);\r\n\t}\r\n\r\n\t_checkArguments (centerX, centerY, radius, checkExplored) {\r\n\t\treturn !isNaN(centerX + centerY + radius)\r\n\t\t\t&& isFinite(centerX + centerY + radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Get line on a grid. Based on Bresenham's line algorithm.\r\n\t * @param {Point} point0 Start position.\r\n\t * @param {Point} point1 End position.\r\n\t */\r\n\tgetPointsOfLine (point0, point1) {\r\n\t\tlet dx = point1.x - point0.x,\r\n\t\t\tdy = point1.y - point0.y,\r\n\t\t\tnx = Math.abs(dx),\r\n\t\t\tny = Math.abs(dy),\r\n\t\t\tsx = (dx > 0) ? 1 : -1,\r\n\t\t\tsy = (dy > 0) ? 1 : -1,\r\n\t\t\tp = new Point(point0.x, point0.y),\r\n\t\t\tpoints = [new Point(p.x, p.y)];\r\n\t\tfor (let ix = 0, iy = 0; ix < nx || iy < ny;) {\r\n\t\t\tif ((0.5 + ix) / nx == (0.5 + iy) / ny) {\r\n\t\t\t\tp.x += sx;\r\n\t\t\t\tp.y += sy;\r\n\t\t\t\tix++;\r\n\t\t\t\tiy++;\r\n\t\t\t} else if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\r\n\t\t\t\tp.x += sx;\r\n\t\t\t\tix++;\r\n\t\t\t} else {\r\n\t\t\t\tp.y += sy;\r\n\t\t\t\tiy++;\r\n\t\t\t}\r\n\t\t\tpoints.push(new Point(p.x, p.y));\r\n\t\t}\r\n\t\treturn points;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\n/**\r\n * Represents a Rectangle\r\n * @extends Point\r\n */\r\nexport default class Rectangle extends Point {\r\n\t/**\r\n\t * Create a Rectangle.\r\n\t * @param {number} x - Left border position of rectangle.\r\n\t * @param {number} y - Top border position of rectangle.\r\n\t * @param {number} width - Width of rectangle.\r\n\t * @param {number} height - Height of rectangle.\r\n\t */\r\n\tconstructor (x, y, width, height) {\r\n\t\tsuper(x, y);\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\t/**\r\n\t * Get width of Rectangle.\r\n\t * @return {number} The width of Rectangle.\r\n\t */\r\n\tget width () {\r\n\t\treturn Number(this._width) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set width of Rectangle.\r\n\t * @param {number} The Width of Rectangle.\r\n\t */\r\n\tset width (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._width = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get height of Rectangle.\r\n\t * @return {number} The height of Rectangle.\r\n\t */\r\n\tget height () {\r\n\t\treturn Number(this._height) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set height of Rectangle.\r\n\t * @param {number} The height of Rectangle.\r\n\t */\r\n\tset height (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._height = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get top of Rectangle.\r\n\t * @return {number} The top border of Rectangle.\r\n\t */\r\n\tget top () {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Get right of Rectangle.\r\n\t * @return {number} The right border of Rectangle.\r\n\t */\r\n\tget right () {\r\n\t\treturn this.x + this.width;\r\n\t}\r\n\r\n\t/**\r\n\t * Get bottom of Rectangle.\r\n\t * @return {number} The bottom border of Rectangle.\r\n\t */\r\n\tget bottom () {\r\n\t\treturn this.y + this.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Get left of Rectangle.\r\n\t * @return {number} The left border of Rectangle.\r\n\t */\r\n\tget left () {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Get center of Rectangle.\r\n\t * @return {Point} Point with coordinates to center of Rectangle.\r\n\t */\r\n\tget center () {\r\n\t\treturn new Point(\r\n\t\t\tthis.x + (this.width / 2),\r\n\t\t\tthis.y + (this.height / 2)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Check collides with other Rectangle.\r\n\t * @param {Object} rectangle Object with x, y, width and height properties.\r\n\t * @return {boolean} Rectangles collides?.\r\n\t */\r\n\tcollides (rectangle) {\r\n\t\trectangle = rectangle || {};\r\n\t\tlet result = false;\r\n\t\tif (\r\n\t\t\t!isNaN(rectangle.x + rectangle.y + rectangle.width + rectangle.height)\r\n\t\t\t&& rectangle.x <= this.x + this.width\r\n\t\t\t&& rectangle.x + rectangle.width >= this.x\r\n\t\t\t&& rectangle.y <= this.y + this.height\r\n\t\t\t&& rectangle.height + rectangle.y >= this.y\r\n\t\t) {\r\n\t\t\tresult = true;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t// @TODO complete!\r\n\tforEachPoint (callback) {}\r\n}\r\n","import PRNG from './PRNG';\r\nimport Point from './Point';\r\nimport Rectangle from './Rectangle';\r\n\r\n/**\r\n * Represents a Dungeon class.\r\n */\r\nexport default class Dungeon {\r\n\t/**\r\n\t * Create a dungeon.\r\n\t * @param {Object} [options] Dungeon generation options.\r\n\t * @param {number} options.seed The seed to pseudorandom number generator.\r\n\t * @param {number} options.roomsAmount The amount of rooms.\r\n\t * @param {number} options.roomMinSize Min size of room.\r\n\t * @param {number} options.roomMaxSize Max size of room.\r\n\t * @param {number} options.corridorMinLength Min length of corridors.\r\n\t * @param {number} options.corridorMaxLength Max length of corridors.\r\n\t * @param {number} options.corridorComplexity Complexity corridors.\r\n\t */\r\n\tconstructor (options) {\r\n\t\t// @TODO this.map = new Rectangle()?\r\n\t\tthis._tiles = [];\r\n\t\tthis._rooms = [];\r\n\t\tthis._corridors = [];\r\n\t\tthis._prng = new PRNG(options.seed);\r\n\t\tthis._options = this.validateOptions(options);\r\n\t\tthis.generate();\r\n\t}\r\n\r\n\t/**\r\n\t * Returns validated options.\r\n\t * @param  {Object} options Options.\r\n\t * @return {Object} validated options.\r\n\t */\r\n\tvalidateOptions (options) {\r\n\t\toptions = options || {};\r\n\t\tconst resultOptions = {};\r\n\t\tObject.keys(this.defaultOptions).forEach(key => {\r\n\t\t\tconst option = options[key];\r\n\t\t\tif (isNaN(option) || !isFinite(option) || option < 1) {\r\n\t\t\t\tresultOptions[key] = parseInt(this.defaultOptions[key], 10) || 1;\r\n\t\t\t} else {\r\n\t\t\t\tresultOptions[key] = parseInt(option, 10);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn resultOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Get a default options.\r\n\t * @readOnly\r\n\t * @return {Object} Default options.\r\n\t */\r\n\tget defaultOptions () {\r\n\t\treturn {\r\n\t\t\tseed: Math.random(),\r\n\t\t\troomsAmount: 7,\r\n\t\t\troomMinSize: 5,\r\n\t\t\troomMaxSize: 10,\r\n\t\t\tcorridorMinLength: 3,\r\n\t\t\tcorridorMaxLength: 7,\r\n\t\t\tcorridorComplexity: 3,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of rooms.\r\n\t * @readOnly\r\n\t * @return {array} List of rooms.\r\n\t */\r\n\tget rooms () {\r\n\t\treturn this._rooms.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of corridors.\r\n\t * @readOnly\r\n\t * @return {array} List of corridors.\r\n\t */\r\n\tget corridors () {\r\n\t\treturn this._corridors.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of all builds.\r\n\t * @readOnly\r\n\t * @return {array} List of builds (rooms & corridors).\r\n\t */\r\n\tget builds () {\r\n\t\treturn this.rooms.concat(this.corridors);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the width of dungeon.\r\n\t * @readOnly\r\n\t * @return {number} The dungeon width (number of tiles).\r\n\t */\r\n\tget width () {\r\n\t\treturn Array.isArray(this._tiles[0]) ? this._tiles[0].length : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the height of dungeon.\r\n\t * @readOnly\r\n\t * @return {number} The dungeon height (number of tiles).\r\n\t */\r\n\tget height () {\r\n\t\treturn Array.isArray(this._tiles) ? this._tiles.length : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Run callback for each tile of generated map.\r\n\t * @param {Function} callback Function called fo each tile.\r\n\t */\r\n\tforEachTile (callback) {\r\n\t\tif (this._tiles && callback instanceof Function) {\r\n\t\t\tfor (var y = 0; y < this._tiles.length; y++) {\r\n\t\t\t\tfor (var x = 0; x < this._tiles[y].length; x++) {\r\n\t\t\t\t\tcallback(x, y, this._tiles[y][x]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tisFloor () {\r\n\t\treturn !this.isWall.apply(this, arguments);\r\n\t}\r\n\r\n\t/**\r\n\t * Get type of tile.\r\n\t * @param {number} x - The y of tile position.\r\n\t * @param {number} y - The x of tile position.\r\n\t * @return {boolean}\r\n\t */\r\n\tisWall (x, y) {\r\n\t\tlet result = true;\r\n\t\tif (Array.isArray(this._tiles[y]) && this._tiles[y].hasOwnProperty(x)) {\r\n\t\t\tresult = !this._tiles[y][x];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Generate dungeon. Generate arrays of rooms and corridors, matrix of tiles\r\n\t */\r\n\tgenerate () {\r\n\t\tthis._generateBuilds();\r\n\t\tthis._optimizeBuilds();\r\n\t\tthis._createMap();\r\n\t}\r\n\r\n\t/**\r\n\t * Generate builds (rooms & corridors).\r\n\t * @private\r\n\t * @TODO need decomposition!\r\n\t */\r\n\t_generateBuilds () {\r\n\t\tconst random = (max, min) => Math.floor(this._prng.generate(min, max));\r\n\t\tconst {\r\n\t\t\troomsAmount,\r\n\t\t\troomMinSize,\r\n\t\t\troomMaxSize,\r\n\t\t\tcorridorMinLength,\r\n\t\t\tcorridorMaxLength\r\n\t\t} = this._options;\r\n\r\n\t\t// set default\r\n\t\tthis._rooms = [];\r\n\t\tthis._corridors = [];\r\n\r\n\t\t// add first room\r\n\t\tthis._rooms.push(new Rectangle(\r\n\t\t\t1,\r\n\t\t\t1,\r\n\t\t\trandom(roomMinSize, roomMaxSize),\r\n\t\t\trandom(roomMinSize, roomMaxSize),\r\n\t\t));\r\n\t\tthis._rooms[0].children = [];\r\n\r\n\t\t// main loop\r\n\t\twhile (this._rooms.length < roomsAmount) {\r\n\t\t\t// configure new room and corridor relative to random room from list\r\n\t\t\tconst lastRoom = this._rooms[random(0, this._rooms.length - 1)],\r\n\t\t\t\tnewRoomWidth = random(roomMinSize, roomMaxSize),\r\n\t\t\t\tnewRoomHeight = random(roomMinSize, roomMaxSize),\r\n\t\t\t\tnewRoom = new Rectangle(0, 0, newRoomWidth, newRoomHeight),\r\n\t\t\t\tnewCorridorLength = random(corridorMinLength, corridorMaxLength),\r\n\t\t\t\tnewCorridor = new Rectangle(0, 0, 1, 1),\r\n\t\t\t\tdirection = parseInt(Math.random() * 4, 10);\r\n\t\t\tlastRoom.children.push(newCorridor);\r\n\t\t\tnewRoom.parent = newCorridor;\r\n\t\t\tnewRoom.children = [];\r\n\t\t\tnewCorridor.parent = lastRoom;\r\n\t\t\tnewCorridor.children = [newRoom];\r\n\r\n\t\t\t// configure new corridor and room\r\n\t\t\tif (direction === 0 || direction === 2) {\r\n\t\t\t\tnewRoom.y = lastRoom.bottom - 1 - random(\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tMath.abs(newRoom.height + lastRoom.height) - 1,\r\n\t\t\t\t);\r\n\t\t\t\tnewCorridor.y = random(\r\n\t\t\t\t\tMath.max(lastRoom.top, newRoom.top),\r\n \t\t\t\t\tMath.min(lastRoom.bottom, newRoom.bottom) - 1\r\n\t\t\t\t);\r\n\t\t\t\tnewCorridor.width = newCorridorLength;\r\n\t\t\t} else {\r\n\t\t\t\tnewRoom.x = lastRoom.right - 1 - random(\r\n\t\t\t\t\t0,\r\n\t\t\t\t\tMath.abs(newRoom.width + lastRoom.width) - 1,\r\n\t\t\t\t);\r\n\t\t\t\tnewCorridor.height = newCorridorLength;\r\n\t\t\t\tnewCorridor.x = random(\r\n\t\t\t\t\tMath.max(lastRoom.left, newRoom.left),\r\n\t\t\t\t\tMath.min(lastRoom.right, newRoom.right),\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// configure new corridor and room\r\n\t\t\tif (direction === 0) { // left\r\n\t\t\t\tnewRoom.x = lastRoom.right + newCorridorLength;\r\n\t\t\t\tnewCorridor.x = lastRoom.right;\r\n\t\t\t} else if (direction === 1) { // bottom\r\n\t\t\t\tnewRoom.y = lastRoom.bottom + newCorridorLength;\r\n\t\t\t\tnewCorridor.y = lastRoom.bottom;\r\n\t\t\t} else if (direction === 2) { // right\r\n\t\t\t\tnewRoom.x = lastRoom.left - newCorridorLength - newRoom.width;\r\n\t\t\t\tnewCorridor.x = lastRoom.left - newCorridor.width;\r\n\t\t\t} else { // top\r\n\t\t\t\tnewRoom.y = lastRoom.top - newCorridorLength - newRoom.height;\r\n\t\t\t\tnewCorridor.y = lastRoom.top - newCorridor.height;\r\n\t\t\t}\r\n\r\n\t\t\t// if new builds is suitable - save it\r\n\t\t\tif (this._isSuitableBuilds(newRoom, newCorridor)) {\r\n\t\t\t\tthis._rooms.push(newRoom);\r\n\t\t\t\tthis._corridors.push(newCorridor);\r\n\t\t\t} else {\r\n\t\t\t\tlastRoom.children = lastRoom.children.filter(child => child !== newCorridor);\r\n\t\t\t\tnewCorridor.children = newCorridor.children.filter(child => child !== newRoom);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Chack that all arguments is suitable builds for create dungeon.\r\n\t * @param  {...Rectangle} newBuilds Builds.\r\n\t * @return {boolean} Is all arguments suitable builds for create dungeon?\r\n\t */\r\n\t_isSuitableBuilds (...newBuilds) {\r\n\t\treturn newBuilds.every(newBuild => this._isSuitableBuild(newBuild));\r\n\t}\r\n\r\n\t/**\r\n\t * Check that build is suitable to place in dungeon.\r\n\t * @param  {Rectangle} newBuild Checking build.\r\n\t * @return {boolean} Build is suitable?\r\n\t */\r\n\t_isSuitableBuild (newBuild) {\r\n\t\tconst checkingBuilds = this.builds.filter(build => {\r\n\t\t\treturn build.parent !== newBuild.parent\r\n\t\t\t\t&& build !== newBuild.parent\r\n\t\t\t\t&& build !== newBuild.children\r\n\t\t\t\t&& !build.children.includes(newBuild.parent)\r\n\t\t});\r\n\t\treturn !checkingBuilds.some(build => build.collides(newBuild));\r\n\t}\r\n\r\n\t/**\r\n\t * Translates all builds to positive coordinates.\r\n\t * @private\r\n\t */\r\n\t_optimizeBuilds () {\r\n\t\t// leftmost top point search\r\n\t\tconst topLeft = this._getTopLeft();\r\n\r\n\t\t// translate rooms to leftmost top position (1, 1)\r\n\t\tif (topLeft.x < 1) {\r\n\t\t\tthis._translateBuilds(1 - topLeft.x, 0);\r\n\t\t}\r\n\t\tif (topLeft.y < 1) {\r\n\t\t\tthis._translateBuilds(0, 1 - topLeft.y);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns the point of leftmost top position among all builds.\r\n\t * @private\r\n\t * @return {Object} The point.\r\n\t */\r\n\t_getTopLeft () {\r\n\t\tconst topLeft = new Point(Infinity, Infinity);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tif (build.x < topLeft.x) {\r\n\t\t\t\ttopLeft.x = build.x;\r\n\t\t\t}\r\n\t\t\tif (build.y < topLeft.y) {\r\n\t\t\t\ttopLeft.y = build.y;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn topLeft;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the point of rightmost bottom position among all builds.\r\n\t * @private\r\n\t * @return {Object} The point.\r\n\t */\r\n\t_getBottomRight () {\r\n\t\tconst bottomRight = new Point(-Infinity, -Infinity);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tif (build.right > bottomRight.x) {\r\n\t\t\t\tbottomRight.x = build.right;\r\n\t\t\t}\r\n\t\t\tif (build.bottom > bottomRight.y) {\r\n\t\t\t\tbottomRight.y = build.bottom;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn bottomRight;\r\n\t}\r\n\r\n\t/**\r\n\t * Translate all builds.\r\n\t * @private\r\n\t * @param {number} offsetX - Offset by x axis.\r\n\t * @param {number} offsetY - Offset by y axis.\r\n\t */\r\n\t_translateBuilds (offsetX, offsetY) {\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tbuild.x += offsetX;\r\n\t\t\tbuild.y += offsetY;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Create map: generate array of arrays of tiles.\r\n\t * @private\r\n\t */\r\n\t_createMap () {\r\n\t\tlet bottomRight = this._getBottomRight();\r\n\t\tthis._fillMap(bottomRight.x + 2, bottomRight.y + 2);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tthis._fillRectangle(build.x, build.y, build.width, build.height);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Fill map: generate matrix (array of arrays) with needed size.\r\n\t * @private\r\n\t * @param {number} width - The width of matrix.\r\n\t * @param {number} height - The height of matrix.\r\n\t * @TODO new Rectangle\r\n\t */\r\n\t_fillMap (width, height) {\r\n\t\t// set default\r\n\t\tthis._tiles = [];\r\n\r\n\t\t// this._tiles[y][x] === true (floor) || false (wall)\r\n\t\tfor (var y = 0; y < height; y++) {\r\n\t\t\tthis._tiles.push([]);\r\n\t\t\tfor (var x = 0; x < width; x++) {\r\n\t\t\t\tthis._tiles[y].push(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * fill rectangle area on map.\r\n\t * @private\r\n\t * @param {number} startX - Left border position of rectangle.\r\n\t * @param {number} startY - Top border position of rectangle.\r\n\t * @param {number} width - Width of rectangle.\r\n\t * @param {number} height - Height of rectangle.\r\n\t * @TODO move to Rectangle (forEachPoint)?\r\n\t */\r\n\t_fillRectangle(startX, startY, width, height) {\r\n\t\tfor (var y = startY; y <= startY + height - 1; y++) {\r\n\t\t\tfor (var x = startX; x <= startX + width - 1; x++) {\r\n\t\t\t\tthis._tiles[y][x] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import PRNG from './PRNG';\r\nimport Dungeon from './Dungeon';\r\nimport Explorer from './Explorer';\r\nimport Pathfinder from './Pathfinder';\r\n\r\nconst rglk = {\r\n\tPRNG,\r\n\tDungeon,\r\n\tExplorer,\r\n\tPathfinder,\r\n};\r\nObject.freeze(rglk);\r\n\r\nexport default rglk;\r\nexport {\r\n\tPRNG,\r\n\tDungeon,\r\n\tExplorer,\r\n\tPathfinder,\r\n};\r\n","import rglk from 'rglk';\r\n\r\ninitSection('.js-section-dungeon', canvas => {\r\n\tconst dungeon = new rglk.Dungeon({\r\n\t\troomsAmount: 24,\r\n\t\troomMinSize: 3,\r\n\t\troomMaxSize: 10,\r\n\t\tcorridorMinLength: 1,\r\n\t\tcorridorMaxLength: Math.random() * 10,\r\n\t\tseed: Math.random(),\r\n\t});\r\n\tdraw(canvas, {\r\n\t\tdungeon,\r\n\t\troomColor: '#445',\r\n\t\tcorridorColor: '#223',\r\n\t\tneedRoomsNumbers: true,\r\n\t});\r\n});\r\n\r\ninitSection('.js-section-labyrinth', canvas => {\r\n\tconst dungeon = new rglk.Dungeon({\r\n\t\troomsAmount: 128,\r\n\t\troomMinSize: 1,\r\n\t\troomMaxSize: 1,\r\n\t\tcorridorMinLength: 1,\r\n\t\tcorridorMaxLength: 1,\r\n\t\tseed: Math.random(),\r\n\t});\r\n\tdraw(canvas, {\r\n\t\tdungeon,\r\n\t\troomColor: '#445',\r\n\t\tcorridorColor: '#445',\r\n\t});\r\n});\r\n\r\nlet mousePosition = {x: 0, y: 0};\r\n\r\ninitSection('.js-section-explorer', canvas => {\r\n\tconst dungeon = new rglk.Dungeon({\r\n\t\t\troomsAmount: 6,\r\n\t\t\troomMinSize: 3,\r\n\t\t\troomMaxSize: 12,\r\n\t\t\tcorridorMinLength: 1,\r\n\t\t\tcorridorMaxLength: 1,\r\n\t\t\tseed: Math.random(),\r\n\t\t}),\r\n\t\texplorer = new rglk.Explorer((x, y) => dungeon.isFloor(x, y));\r\n\tconst tileSize = calculateTileSize(dungeon, canvas);\r\n\tconst fov = explorer.calculate(\r\n\t\t\tparseInt(dungeon.rooms[0].center.x, 10),\r\n\t\t\tparseInt(dungeon.rooms[0].center.y, 10),\r\n\t\t\t12,\r\n\t\t);\r\n\tcanvas.onmousemove = event => {\r\n\t\tmousePosition = getMousePosition(event);\r\n\t\tconst inDungeonPosition = {\r\n\t\t\t\tx: Math.round(mousePosition.x / tileSize),\r\n\t\t\t\ty: Math.round(mousePosition.y / tileSize),\r\n\t\t\t},\r\n\t\t\tnewFov = explorer.calculate(\r\n\t\t\t\tinDungeonPosition.x,\r\n\t\t\t\tinDungeonPosition.y,\r\n\t\t\t\t12,\r\n\t\t\t);\r\n\t\tif (dungeon.isFloor(inDungeonPosition.x, inDungeonPosition.y)) {\r\n\t\t\tdraw(canvas, {\r\n\t\t\t\tfov: newFov,\r\n\t\t\t\tdungeon,\r\n\t\t\t\tradius: 12,\r\n\t\t\t\troomColor: '#222',\r\n\t\t\t\tcorridorColor: '#222',\r\n\t\t\t\tcenter: inDungeonPosition,\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\tdraw(canvas, {\r\n\t\tfov,\r\n\t\tdungeon,\r\n\t\tradius: 12,\r\n\t\troomColor: '#222',\r\n\t\tcorridorColor: '#222',\r\n\t\tcenter: dungeon.rooms[0].center,\r\n\t});\r\n});\r\n\r\ninitSection('.js-section-pathfinder', canvas => {\r\n\tconst dungeon = new rglk.Dungeon({\r\n\t\t\troomsAmount: 24,\r\n\t\t\troomMinSize: 4,\r\n\t\t\troomMaxSize: 12,\r\n\t\t\tcorridorMinLength: 1,\r\n\t\t\tcorridorMaxLength: 5,\r\n\t\t\tseed: Math.random(),\r\n\t\t}),\r\n\t\tpathfinder = new rglk.Pathfinder((x, y) => dungeon.isFloor(x, y));\r\n\tconst path = pathfinder.search(\r\n\t\tparseInt(dungeon.rooms[0].center.x, 10),\r\n\t\tparseInt(dungeon.rooms[0].center.y, 10),\r\n\t\tparseInt(dungeon.rooms[dungeon.rooms.length - 1].center.x, 10),\r\n\t\tparseInt(dungeon.rooms[dungeon.rooms.length - 1].center.y, 10),\r\n\t);\r\n\tdraw(canvas, {\r\n\t\tpath,\r\n\t\tdungeon,\r\n\t});\r\n});\r\n\r\nfunction initSection (sectionSelector, render) {\r\n\tconst section = document.querySelector(sectionSelector);\r\n\tif (section) {\r\n\t\tconst canvas = section.querySelector('canvas'),\r\n\t\t\tbutton = section.querySelector('.js-reload-button')\r\n\t\tif (canvas) {\r\n\t\t\tcanvas.width = canvas.clientWidth;\r\n\t\t\tcanvas.height = canvas.width / 4 * 3;\r\n\t\t\trender(canvas);\r\n\t\t}\r\n\t\tif (button) {\r\n\t\t\tbutton.addEventListener('click', () => render(canvas));\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction draw (canvas, data) {\r\n\tdata = data || {};\r\n\tconst context = canvas.getContext('2d'), {\r\n\t\tfov,\r\n\t\tpath,\r\n\t\tdungeon,\r\n\t} = data;\r\n\tdata.tileSize = calculateTileSize(dungeon, canvas);\r\n\tcontext.clearRect(0, 0, canvas.width, canvas.height);\r\n\tif (dungeon) {\r\n\t\tdrawMap(context, data);\r\n\t\tif (fov) {\r\n\t\t\tdrawFOV(context, data);\r\n\t\t}\r\n\t\tif (path) {\r\n\t\t\tdrawPath(context, data);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction drawMap (context, data) {\r\n\tdata = data || {};\r\n\tconst {\r\n\t\tdungeon,\r\n\t\troomColor = '#445',\r\n\t\tcorridorColor = '#223',\r\n\t\ttileSize,\r\n\t} = data;\r\n\r\n\t// draw rooms\r\n\tdungeon.rooms.forEach((room, index) => {\r\n\t\tcontext.fillStyle = roomColor;\r\n\t\tcontext.fillRect(\r\n\t\t\troom.x * tileSize,\r\n\t\t\troom.y * tileSize,\r\n\t\t\troom.width * tileSize,\r\n\t\t\troom.height * tileSize,\r\n\t\t);\r\n\t\tif (data.needRoomsNumbers) {\r\n\t\t\tcontext.fillStyle = 'rgba(255,255,255,.5)';\r\n\t\t\tcontext.textBaseline = 'middle';\r\n\t\t\tcontext.textAlign = 'center';\r\n\t\t\tcontext.font = `${tileSize}px Arial`;\r\n\t\t\tcontext.fillText(\r\n\t\t\t\tindex,\r\n\t\t\t\troom.center.x * tileSize,\r\n\t\t\t\troom.center.y * tileSize,\r\n\t\t\t);\r\n\t\t}\r\n\t});\r\n\r\n\t// draw corridors\r\n\tdungeon.corridors.forEach(corridor => {\r\n\t\tcontext.fillStyle = corridorColor;\r\n\t\tcontext.fillRect(\r\n\t\tcorridor.x * tileSize,\r\n\t\tcorridor.y * tileSize,\r\n\t\tcorridor.width * tileSize,\r\n\t\tcorridor.height * tileSize,\r\n\t\t);\r\n\t});\r\n}\r\n\r\nfunction drawFOV (context, data) {\r\n\tconst {\r\n\t\tfov,\r\n\t\tcenter,\r\n\t\tradius,\r\n\t\tdungeon,\r\n\t\ttileSize,\r\n\t} = data;\r\n\tfov.forEach(tile => {\r\n\t\tconst distance = Math.sqrt((center.x - tile.x)**2 + (center.y - tile.y)**2),\r\n\t\t\tproportion = 1 - (distance / radius);\r\n\t\tcontext.fillStyle = `rgba(255,210,150,${proportion})`;\r\n\t\tcontext.globalAlpha = 0.7;\r\n\t\tcontext.fillRect(\r\n\t\t\ttile.x * tileSize,\r\n\t\t\ttile.y * tileSize,\r\n\t\t\ttileSize,\r\n\t\t\ttileSize,\r\n\t\t);\r\n\t\tcontext.globalAlpha = 1;\r\n\t});\r\n}\r\n\r\nfunction drawPath (context, data) {\r\n\tconst {\r\n\t\tpath,\r\n\t\tdungeon,\r\n\t\ttileSize,\r\n\t} = data;\r\n\tcontext.strokeStyle = '#0e0';\r\n\tcontext.fillStyle = '#0e0';\r\n\tcontext.lineWidth = Math.ceil(tileSize / 3);\r\n\tif (path.length) {\r\n\t\tcontext.beginPath();\r\n\t\tcontext.moveTo(\r\n\t\t\tpath[0].x * tileSize + (tileSize / 2),\r\n\t\t\tpath[0].y * tileSize + (tileSize / 2)\r\n\t\t);\r\n\t\tpath.forEach((point, index) => {\r\n\t\t\tif (index === 0 || index === path.length - 1) {\r\n\t\t\t\tcontext.fillRect(\r\n\t\t\t\t\tpoint.x * tileSize,\r\n\t\t\t\t\tpoint.y * tileSize,\r\n\t\t\t\t\ttileSize,\r\n\t\t\t\t\ttileSize,\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t\tcontext.lineTo(\r\n\t\t\t\tpoint.x * tileSize + (tileSize / 2),\r\n\t\t\t\tpoint.y * tileSize + (tileSize / 2)\r\n\t\t\t);\r\n\t\t});\r\n\t\tcontext.stroke();\r\n\t\tcontext.closePath();\r\n\t}\r\n}\r\n\r\nfunction calculateTileSize (dungeon, canvas) {\r\n\tconst canvasMinSide = Math.min(canvas.width, canvas.height),\r\n\t\tdungeonMaxSide = Math.max(dungeon.width, dungeon.height);\r\n\treturn Math.floor(canvasMinSide / dungeonMaxSide) || 8;\r\n}\r\n\r\nfunction getMousePosition (event) {\r\n\tconst mousePosition = {\r\n\t\tx: 0,\r\n\t\ty: 0,\r\n\t};\r\n\tif (event instanceof Event) {\r\n\t\tconst rect = event.target.getBoundingClientRect();\r\n\t\tmousePosition.x = event.clientX - rect.left;\r\n\t\tmousePosition.y = event.clientY - rect.top;\r\n\t}\r\n\treturn mousePosition;\r\n}\r\n"],"sourceRoot":""}