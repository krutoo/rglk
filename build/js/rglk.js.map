{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/library/js/Point.js","webpack:///./src/library/js/PRNG.js","webpack:///./src/library/js/Node.js","webpack:///./src/library/js/Pathfinder.js","webpack:///./src/library/js/Explorer.js","webpack:///./src/library/js/Rectangle.js","webpack:///./src/library/js/Dungeon.js","webpack:///./src/library/js/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","pointsData","WeakMap","Point","x","y","_classCallCheck","this","set","point","Math","sqrt","pow","Number","isNaN","seeds","PRNG","seed","isFinite","TypeError","min","max","newSeed","random","_Point2","Node","options","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","g","h","parent","path","currentNode","push","reverse","_g","_h","_parent","node","_Node","Pathfinder","isOpen","Function","_isOpen","x1","y1","x2","y2","start","end","unvisitedNodes","visitedNodes","resultPath","_loop","currentNodeIndex","forEach","item","f","splice","isEqualTo","getPathToRoot","neighbors","getNeighbors","_loop2","neighbor","find","getHeuristic","length","abs","_Point","explorersData","Explorer","isTransparent","_isTransparent","centerX","centerY","radius","checkExplored","visiblePoints","checkArguments","apply","arguments","squareRadius","center","minX","maxX","minY","maxY","canCheck","points","getPointsOfLine","line","squareDistance","isTransparentTile","values","point0","point1","dx","dy","nx","ny","sx","sy","ix","iy","rectanglesData","Rectangle","width","height","rectangle","result","left","right","top","bottom","BUILDS_TYPES","freeze","room","corridor","connector","DIRECTIONS","dungeonsData","Dungeon","setOptions","generate","newOptions","validateOptions","getDefaultOptions","defaultOptions","resultOptions","keys","defaultValue","minimalValue","getMininalOptions","parseInt","Infinity","roomsAmount","roomMinSize","roomMaxSize","corridorMinLength","corridorMaxLength","corridorComplexity","callback","isFloor","buffer","Boolean","getBufferIndex","getOptions","prng","builds","optimizeBuilds","generateBuilds","createBuffer","createRoom","filter","build","type","_toConsumableArray","tryBuild","readyBuilds","_this2","extensibleBuilds","startingBuild","getRandom","newBuilds","createBranch","some","isSuitableBuild","concat","children","pop","branch","partParent","index","createCorridor","closure","createConnector","_ref","_ref2","_getOptions","createBuild","direction","placeBuild","_ref3","_getOptions2","corridorLength","_extends","_ref4","seededRandom","floor","newBuild","isSelf","isParent","isChildren","includes","isConnected","collides","topLeft","getTopLeftPoint","translateBuilds","offsetX","offsetY","_this3","bottomRight","getBottomRightPoint","Array","fill","fillRectangle","_ref5","privateBuilds","rglk"],"mappings":"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","file":"js/rglk.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n","/**\r\n * Points private data.\r\n * @type {WeakMap}\r\n */\r\nconst pointsData = new WeakMap();\r\n\r\n/**\r\n * Represents 2D Point.\r\n */\r\nexport default class Point {\r\n\t/**\r\n\t * @param {number} x - the x of point.\r\n\t * @param {number} y - the y of point.\r\n\t */\r\n\tconstructor (x, y) {\r\n\t\tpointsData.set(this, {});\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\t/**\r\n\t * Get x value.\r\n\t * @return {number} The x value.\r\n\t */\r\n\tget x () {\r\n\t\treturn Number(pointsData.get(this).x) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set x value.\r\n\t * @param {number} The x value.\r\n\t */\r\n\tset x (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tpointsData.get(this).x = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get y value.\r\n\t * @return {number} The y value.\r\n\t */\r\n\tget y () {\r\n\t\treturn Number(pointsData.get(this).y) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set y value.\r\n\t * @param {number} The y value.\r\n\t */\r\n\tset y (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tpointsData.get(this).y = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns a distance to a point.\r\n\t * @param {Point} Object of Point class.\r\n\t * @return {number} Distance.\r\n\t */\r\n\tgetDistanceTo (point) {\r\n\t\tpoint = point || {};\r\n\t\treturn Math.sqrt((point.x - this.x) ** 2 + (point.y - this.y) ** 2);\r\n\t}\r\n\r\n\t/**\r\n\t * Check that argument point is equal to self.\r\n\t * @param {Object} point Object with x and y properties.\r\n\t * @return {boolean} Are points is equal?\r\n\t */\r\n\tisEqualTo (point) {\r\n\t\tpoint = point || {};\r\n\t\treturn point.x === this.x && point.y === this.y;\r\n\t}\r\n}\r\n","/**\r\n * Seeds for generators\r\n * @type {WeakMap}\r\n */\r\nconst seeds = new WeakMap();\r\n\r\n/**\r\n * Represents a Pseudo Random Number Generator.\r\n * Thanks for author of this article: http://indiegamr.com/generate-repeatable-random-numbers-in-js/\r\n */\r\nexport default class PRNG {\r\n\t/**\r\n\t * Create a PRNG.\r\n\t * @param {number} seed Seed - number which will the base for generate numbers.\r\n\t */\r\n\tconstructor (seed) {\r\n\t\tif (isNaN(seed) && !isFinite(seed)) {\r\n\t\t\tthrow new TypeError('PRNG.constructor: first argument must be a finite number');\r\n\t\t}\r\n\t\tseeds.set(this, Number(seed));\r\n\t}\r\n\r\n\t/**\r\n\t * Returns random number between min and max.\r\n\t * @return {number} Float number between 0 and 1.\r\n\t */\r\n\tgenerate (min, max) {\r\n\t\tconst oldSeed = seeds.get(this);\r\n\t\tconst newSeed = (oldSeed * 9301 + 49297) % 233280\r\n\t\tconst random = newSeed / 233280;\r\n\t\tseeds.set(this, newSeed);\r\n\t\treturn random;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\nexport default class Node extends Point {\r\n\tconstructor(options) {\r\n\t\toptions = options || {};\r\n\t\tsuper(options.x, options.y);\r\n\t\tthis.g = options.g;\r\n\t\tthis.h = options.h;\r\n\t\tthis.parent = options.parent;\r\n\t}\r\n\r\n\tget g () {\r\n\t\treturn Number(this._g) || 0;\r\n\t}\r\n\r\n\tset g (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._g = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\tget h () {\r\n\t\treturn Number(this._h) || 0;\r\n\t}\r\n\r\n\tset h (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._h = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\tget parent () {\r\n\t\treturn this._parent instanceof Node\r\n\t\t\t? this._parent\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tset parent (node) {\r\n\t\tif (node instanceof Node) {\r\n\t\t\tthis._parent = node;\r\n\t\t}\r\n\t}\r\n\r\n\tget f () {\r\n\t\treturn (this.g + this.h);\r\n\t}\r\n\r\n\tgetPathToRoot () {\r\n\t\tconst path = [];\r\n\t\tlet currentNode = this;\r\n\t\twhile (currentNode.parent) {\r\n\t\t\tpath.push(currentNode);\r\n\t\t\tcurrentNode = currentNode.parent;\r\n\t\t}\r\n\t\treturn path.reverse();\r\n\t}\r\n}\r\n","import Node from './Node';\r\n\r\n/**\r\n * Represents a Pathfinder.\r\n */\r\nexport default class Pathfinder {\r\n\t/**\r\n\t * @param {Function} isOpen Callback, defines that point is open.\r\n\t */\r\n\tconstructor (isOpen) {\r\n\t\tif (isOpen instanceof Function) {\r\n\t\t\tthis._isOpen = isOpen;\r\n\t\t} else {\r\n\t\t\tthrow new TypeError('Pathfinder.constructor: first argument must be a function');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Search path between two points.\r\n\t * @param {number} x1 First point x.\r\n\t * @param {number} y1 First point y.\r\n\t * @param {number} x2 Second point x.\r\n\t * @param {number} y2 Second point y.\r\n\t * @return {Array} List of path points.\r\n\t */\r\n\tsearch (x1, y1, x2, y2) {\r\n\t\tlet start = new Node({\r\n\t\t\t\tx: x1,\r\n\t\t\t\ty: y1,\r\n\t\t\t}),\r\n\t\t\tend = new Node({\r\n\t\t\t\tx: x2,\r\n\t\t\t\ty: y2,\r\n\t\t\t}),\r\n\t\t\tunvisitedNodes = [start],\r\n\t\t\tvisitedNodes = [],\r\n\t\t\tresultPath = [];\r\n\r\n\t\t// main loop\r\n\t\twhile (unvisitedNodes.length) {\r\n\t\t\t// search in open list node with lowest value f = g + h\r\n\t\t\tlet currentNodeIndex = 0,\r\n\t\t\t\tcurrentNode = unvisitedNodes[0];\r\n\t\t\tunvisitedNodes.forEach((item, i) => {\r\n\t\t\t\tif (item.f < currentNode.f) {\r\n\t\t\t\t\tcurrentNode = item;\r\n\t\t\t\t\tcurrentNodeIndex = i;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// add found node to closed list, delete it from open list\r\n\t\t\tunvisitedNodes.splice(currentNodeIndex, 1);\r\n\t\t\tvisitedNodes.push(currentNode);\r\n\r\n\t\t\t// if current node is target then create path and break\r\n\t\t\tif (currentNode.isEqualTo(end)) {\r\n\t\t\t\tresultPath = currentNode.getPathToRoot();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tlet neighbors = this.getNeighbors(currentNode); // @TODO check length before run cycle\r\n\t\t\tfor (let i = 0; i < neighbors.length; i++) {\r\n\t\t\t\tlet neighbor = neighbors[i];\r\n\r\n\t\t\t\t// ignore neighbor if he in closed list\r\n\t\t\t\tif (visitedNodes.find(node => node.isEqualTo(neighbor))) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if neighbor not in open list, add him to open list, update h\r\n\t\t\t\tif (!unvisitedNodes.find(node => node.isEqualTo(neighbor))) {\r\n\t\t\t\t\tneighbor.h = this.getHeuristic(neighbor.x, neighbor.y, end.x, end.y);\r\n\t\t\t\t\tunvisitedNodes.push(neighbor);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn resultPath;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns heuristic value (Manhattan distance) between two nodes.\r\n\t * @param {number} x1 First node x.\r\n\t * @param {number} y1 First node y.\r\n\t * @param {number} x2 Second node x.\r\n\t * @param {number} y2 Second node y.\r\n\t * @return {number} heuristic value.\r\n\t */\r\n\tgetHeuristic (x1, y1, x2, y2) {\r\n\t\tconst d1 = Math.abs(x2 - x1),\r\n\t\t\td2 = Math.abs(y2 - y1);\r\n\t\treturn d1 + d2;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns list of node neighbors.\r\n\t * @param {Node} node Node to get a neighbors.\r\n\t * @return {Array} List of neighbors.\r\n\t * @TODO move to Node class?\r\n\t */\r\n\tgetNeighbors (node) {\r\n\t\tlet neighbors = [];\r\n\t\tfor (let y = -1; y <= 1; y++) {\r\n\t\t\tfor (let x = -1; x <= 1; x++) {\r\n\t\t\t\t// if is not diagonal neighbor\r\n\t\t\t\tif (Math.abs(x + y) === 1) {\r\n\t\t\t\t\tif (this._isOpen(node.x + x, node.y + y)) {\r\n\t\t\t\t\t\tneighbors.push(new Node({\r\n\t\t\t\t\t\t\tx: node.x + x,\r\n\t\t\t\t\t\t\ty: node.y + y,\r\n\t\t\t\t\t\t\tg: node.g + 1,\r\n\t\t\t\t\t\t\tparent: node,\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn neighbors;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\n/**\r\n * Explorers private data.\r\n * @type {WeakMap}\r\n */\r\nconst explorersData = new WeakMap();\r\n\r\n/**\r\n * Represents a Explorer (FOV calculation).\r\n */\r\nexport default class Explorer {\r\n\t/**\r\n\t * @param {Function} isTransparent Callback which must determine that tile is transparent.\r\n\t */\r\n\tconstructor (isTransparent) {\r\n\t\tif (isTransparent instanceof Function) {\r\n\t\t\texplorersData.set(this, { isTransparent });\r\n\t\t\tthis._isTransparent = isTransparent;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Returns an array of points in field of view.\r\n\t * @param {number} centerX The x position of center.\r\n\t * @param {number} centerY The y position of center.\r\n\t * @param {number} radius Radius of view.\r\n\t * @param {Function} [checkExplored] Called if tile is explored.\r\n\t * @return {Array} Visible points array.\r\n\t */\r\n\tcalculate (centerX, centerY, radius, checkExplored) {\r\n\t\tconst visiblePoints = {};\r\n\t\tif (this.checkArguments(...arguments)) {\r\n\t\t\tconst squareRadius = radius ** 2;\r\n\t\t\tconst center = new Point(centerX, centerY);\r\n\t\t\tconst minX = center.x - radius;\r\n\t\t\tconst maxX = center.x + radius;\r\n\t\t\tconst minY = center.y - radius;\r\n\t\t\tconst maxY = center.y + radius;\r\n\t\t\tconst canCheck = checkExplored instanceof Function;\r\n\t\t\tconst isTransparent = explorersData.get(this).isTransparent;\r\n\r\n\t\t\t// check floors in radius\r\n\t\t\tfor (let y = minY; y <= maxY; y++) {\r\n\t\t\t\tfor (let x = minX; x <= maxX; x++) {\r\n\t\t\t\t\t// if x or y equals to bound of square area\r\n\t\t\t\t\tif (minX === x || maxX === x || minY === y || maxY === y) {\r\n\t\t\t\t\t\tconst points = this.getPointsOfLine(center, new Point(x, y));\r\n\t\t\t\t\t\tline: for (let i = 0; i < points.length; i++) {\r\n\t\t\t\t\t\t\tconst point = points[i];\r\n\t\t\t\t\t\t\tconst squareDistance = (center.x - point.x) ** 2 + (center.y - point.y) ** 2;\r\n\t\t\t\t\t\t\tconst isTransparentTile = isTransparent(point.x, point.y);\r\n\t\t\t\t\t\t\tif (squareDistance <= squareRadius && isTransparentTile) {\r\n\t\t\t\t\t\t\t\tif (canCheck) {\r\n\t\t\t\t\t\t\t\t\tcheckExplored(point.x, point.y);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tvisiblePoints[`${point.x}x${point.y}`] = point;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tbreak line;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Object.values(visiblePoints);\r\n\t}\r\n\r\n\tcheckArguments (centerX, centerY, radius, checkExplored) {\r\n\t\treturn !isNaN(centerX + centerY + radius)\r\n\t\t\t&& isFinite(centerX + centerY + radius);\r\n\t}\r\n\r\n\t/**\r\n\t * Get line on a grid. Based on Bresenham's line algorithm.\r\n\t * @param {Point} point0 Start position.\r\n\t * @param {Point} point1 End position.\r\n\t */\r\n\tgetPointsOfLine (point0, point1) {\r\n\t\tlet dx = point1.x - point0.x,\r\n\t\t\tdy = point1.y - point0.y,\r\n\t\t\tnx = Math.abs(dx),\r\n\t\t\tny = Math.abs(dy),\r\n\t\t\tsx = (dx > 0) ? 1 : -1,\r\n\t\t\tsy = (dy > 0) ? 1 : -1,\r\n\t\t\tp = new Point(point0.x, point0.y),\r\n\t\t\tpoints = [new Point(p.x, p.y)];\r\n\t\tfor (let ix = 0, iy = 0; ix < nx || iy < ny;) {\r\n\t\t\tif ((0.5 + ix) / nx === (0.5 + iy) / ny) {\r\n\t\t\t\tp.x += sx;\r\n\t\t\t\tp.y += sy;\r\n\t\t\t\tix++;\r\n\t\t\t\tiy++;\r\n\t\t\t} else if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\r\n\t\t\t\tp.x += sx;\r\n\t\t\t\tix++;\r\n\t\t\t} else {\r\n\t\t\t\tp.y += sy;\r\n\t\t\t\tiy++;\r\n\t\t\t}\r\n\t\t\tpoints.push(new Point(p.x, p.y));\r\n\t\t}\r\n\t\treturn points;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\n/**\r\n * Rectangles private data.\r\n * @type {WeakMap}\r\n */\r\nconst rectanglesData = new WeakMap();\r\n\r\n/**\r\n * Represents a 2D Rectangle.\r\n * @extends Point\r\n */\r\nexport default class Rectangle extends Point {\r\n\t/**\r\n\t * @param {number} x Left border position of rectangle.\r\n\t * @param {number} y Top border position of rectangle.\r\n\t * @param {number} width Width of rectangle.\r\n\t * @param {number} height Height of rectangle.\r\n\t */\r\n\tconstructor (x, y, width, height) {\r\n\t\tsuper(x, y);\r\n\t\trectanglesData.set(this, {});\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\t/**\r\n\t * Get width of Rectangle.\r\n\t * @return {number} The width of Rectangle.\r\n\t */\r\n\tget width () {\r\n\t\treturn Number(rectanglesData.get(this).width) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set width of Rectangle.\r\n\t * @param {number} The Width of Rectangle.\r\n\t */\r\n\tset width (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\trectanglesData.get(this).width = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get height of Rectangle.\r\n\t * @return {number} The height of Rectangle.\r\n\t */\r\n\tget height () {\r\n\t\treturn Number(rectanglesData.get(this).height) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set height of Rectangle.\r\n\t * @param {number} The height of Rectangle.\r\n\t */\r\n\tset height (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\trectanglesData.get(this).height = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get left of Rectangle.\r\n\t * @return {number} The left border of Rectangle.\r\n\t */\r\n\tget left () {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Set left of Rectangle.\r\n\t * @param {number} The left border of Rectangle.\r\n\t */\r\n\tset left (value) {\r\n\t\tthis.x = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Get bottom of Rectangle.\r\n\t * @return {number} The bottom border of Rectangle.\r\n\t */\r\n\tget bottom () {\r\n\t\treturn this.y + this.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Set bottom of Rectangle.\r\n\t * @param {number} The bottom border of Rectangle.\r\n\t */\r\n\tset bottom (value) {\r\n\t\tthis.y = value - this.height;\r\n\t}\r\n\r\n\t/**\r\n\t * Get right of Rectangle.\r\n\t * @return {number} The right border of Rectangle.\r\n\t */\r\n\tget right () {\r\n\t\treturn this.x + this.width;\r\n\t}\r\n\r\n\t/**\r\n\t * Set right of Rectangle.\r\n\t * @param {number} The right border of Rectangle.\r\n\t */\r\n\tset right (value) {\r\n\t\tthis.x = value - this.width;\r\n\t}\r\n\r\n\t/**\r\n\t * Get top of Rectangle.\r\n\t * @return {number} The top border of Rectangle.\r\n\t */\r\n\tget top () {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Set top of Rectangle.\r\n\t * @param {number} The top border of Rectangle.\r\n\t */\r\n\tset top (value) {\r\n\t\tthis.y = value;\r\n\t}\r\n\r\n\t/**\r\n\t * Get center of Rectangle.\r\n\t * @return {Point} Point with coordinates to center of Rectangle.\r\n\t */\r\n\tget center () {\r\n\t\treturn new Point(\r\n\t\t\tthis.x + (this.width / 2),\r\n\t\t\tthis.y + (this.height / 2),\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Check collides with other Rectangle.\r\n\t * @param {Rectangle} rectangle to check.\r\n\t * @return {boolean} Rectangles collides?.\r\n\t */\r\n\tcollides (rectangle) {\r\n\t\trectangle = rectangle || {};\r\n\t\tlet result = true;\r\n\t\tif (\r\n\t\t\tthis.left > rectangle.right\r\n\t\t\t|| this.right < rectangle.left\r\n\t\t\t|| this.top > rectangle.bottom\r\n\t\t\t|| this.bottom < rectangle.top\r\n\t\t) {\r\n\t\t\tresult = false;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n","import PRNG from './PRNG';\r\nimport Point from './Point';\r\nimport Rectangle from './Rectangle';\r\n\r\n/**\r\n * Builds types.\r\n * @type {Object}\r\n */\r\nconst BUILDS_TYPES = Object.freeze({\r\n\troom: 1,\r\n\tcorridor: 2,\r\n\tconnector: 3,\r\n});\r\n\r\n/**\r\n * Dungeons private data.\r\n * @type {Object}\r\n */\r\nconst DIRECTIONS = Object.freeze({\r\n\tleft: 0,\r\n\tbottom: 1,\r\n\tright: 2,\r\n\ttop: 3,\r\n});\r\n\r\n/**\r\n * Dungeons private data.\r\n * @type {WeakMap}\r\n */\r\nconst dungeonsData = new WeakMap();\r\n\r\n/**\r\n * Represents a dungeon generator.\r\n */\r\nexport default class Dungeon {\r\n\t/**\r\n\t * @param {Object} options Options of dungeon.\r\n\t * @param {number} options.roomsAmount Amount of rooms.\r\n\t * @param {number} options.roomMinSize Minimum room size.\r\n\t * @param {number} options.roomMaxSize Maximum room size.\r\n\t * @param {number} options.corridorMinLength Minimum corridor length.\r\n\t * @param {number} options.corridorMaxLength Maximum corridor length.\r\n\t * @param {number} options.corridorComplexity Amount of corridors turns.\r\n\t * @param {number} options.seed Seed for pseudo random number generator.\r\n\t */\r\n\tconstructor (options) {\r\n\t\tdungeonsData.set(this, {});\r\n\t\tthis.setOptions(options);\r\n\t\tthis.generate();\r\n\t}\r\n\r\n\t/**\r\n\t * Width of generated  in tiles.\r\n\t * @readOnly\r\n\t */\r\n\tget width () {\r\n\t\treturn parseInt(dungeonsData.get(this).width, 10) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns height of generated dungeon in tiles.\r\n\t * @readOnly\r\n\t */\r\n\tget height () {\r\n\t\treturn parseInt(dungeonsData.get(this).height, 10) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns rooms of generated dungeon.\r\n\t * @readOnly\r\n\t */\r\n\tget rooms () {\r\n\t\treturn this.builds.filter(build => build.type === BUILDS_TYPES.room);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns corridors of generated dungeon.\r\n\t * @readOnly\r\n\t */\r\n\tget corridors () {\r\n\t\treturn this.builds.filter(build => build.type === BUILDS_TYPES.corridor);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns connectors of generated dungeon.\r\n\t * @readOnly\r\n\t */\r\n\tget connectors () {\r\n\t\treturn this.builds.filter(build => build.type === BUILDS_TYPES.connector);\r\n\t}\r\n\r\n\t/**\r\n\t * Returns all builds of generated dungeon.\r\n\t * @readOnly\r\n\t */\r\n\tget builds () {\r\n\t\tconst privateBuilds = dungeonsData.get(this).builds || [];\r\n\t\treturn [...privateBuilds];\r\n\t}\r\n\r\n\t/**\r\n\t * Update some options.\r\n\t * @param {Object} newOptions New options.\r\n\t * @see constructor\r\n\t */\r\n\tsetOptions (newOptions) {\r\n\t\tdungeonsData.get(this).options = this.validateOptions(newOptions, this.getDefaultOptions());\r\n\t}\r\n\r\n\tvalidateOptions (options, defaultOptions) {\r\n\t\toptions = options || {};\r\n\t\tconst resultOptions = {};\r\n\t\tObject.keys(defaultOptions).forEach(key => {\r\n\t\t\tconst value = options[key];\r\n\t\t\tconst defaultValue = defaultOptions[key];\r\n\t\t\tconst minimalValue = this.getMininalOptions()[key];\r\n\t\t\tif (isNaN(value) || !isFinite(value) || value < minimalValue) {\r\n\t\t\t\tresultOptions[key] = defaultValue;\r\n\t\t\t} else {\r\n\t\t\t\tresultOptions[key] = parseInt(value, 10);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn resultOptions;\r\n\t}\r\n\r\n\tgetMininalOptions () {\r\n\t\treturn {\r\n\t\t\tseed: -Infinity,\r\n\t\t\troomsAmount: 1,\r\n\t\t\troomMinSize: 1,\r\n\t\t\troomMaxSize: 1,\r\n\t\t\tcorridorMinLength: 1,\r\n\t\t\tcorridorMaxLength: 1,\r\n\t\t\tcorridorComplexity: 1,\r\n\t\t};\r\n\t}\r\n\r\n\tgetDefaultOptions () {\r\n\t\treturn {\r\n\t\t\tseed: Math.random(),\r\n\t\t\troomsAmount: 7,\r\n\t\t\troomMinSize: 5,\r\n\t\t\troomMaxSize: 10,\r\n\t\t\tcorridorMinLength: 3,\r\n\t\t\tcorridorMaxLength: 7,\r\n\t\t\tcorridorComplexity: 2,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Calls callback for each tile in dungeon area.\r\n\t * @param {Function} callback Callback that was called for each tile.\r\n\t */\r\n\tforEachTile (callback) {\r\n\t\tif (callback instanceof Function) {\r\n\t\t\tfor (let x = 0; x < this.height; x++) {\r\n\t\t\t\tfor (let y = 0; y < this.width; y++) {\r\n\t\t\t\t\tcallback(x, y, this.isFloor(x, y));\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\t/**\r\n\t * Is wall tile?\r\n\t * @param {number} x X coordinate of tile.\r\n\t * @param {number} y Y coordinate of tile.\r\n\t */\r\n\tisWall (x, y) {\r\n\t\treturn !this.isFloor(x, y);\r\n\t}\r\n\r\n\t/**\r\n\t * Is floor tile?\r\n\t * @param {number} x X coordinate of tile.\r\n\t * @param {number} y Y coordinate of tile.\r\n\t */\r\n\tisFloor (x, y) {\r\n\t\tlet isFloor = false;\r\n\t\tconst buffer = dungeonsData.get(this).buffer || [];\r\n\t\tif (x <= this.width && y <= this.height) {\r\n\t\t\tisFloor = Boolean(buffer[this.getBufferIndex(x, y, this.height)]);\r\n\t\t}\r\n\t\treturn isFloor;\r\n\t}\r\n\r\n\t/**\r\n\t * Generate new dungeon map.\r\n\t */\r\n\tgenerate () {\r\n\t\tconst options = this.getOptions();\r\n\t\tdungeonsData.get(this).prng = new PRNG(options.seed);\r\n\t\tdungeonsData.get(this).builds = this.optimizeBuilds(this.generateBuilds(options));\r\n\t\tdungeonsData.get(this).buffer = this.createBuffer(this.builds);\r\n\t\treturn this;\r\n\t}\r\n\r\n\tgenerateBuilds (options) {\r\n\t\tconst initialRoom = this.createRoom({ x: 0, y: 0 });\r\n\t\tconst builds = [initialRoom];\r\n\t\twhile (builds.filter(build => build.type === BUILDS_TYPES.room).length < this.getOptions().roomsAmount) {\r\n\t\t\tbuilds.push(...this.tryBuild(builds, options));\r\n\t\t}\r\n\t\treturn builds;\r\n\t}\r\n\r\n\ttryBuild (readyBuilds, options) {\r\n\t\tconst extensibleBuilds = readyBuilds.filter(build => build.type !== BUILDS_TYPES.corridor);\r\n\t\tconst startingBuild = extensibleBuilds[this.getRandom(0, extensibleBuilds.length - 1)];\r\n\t\tlet newBuilds = this.createBranch(startingBuild, options.corridorComplexity);\r\n\t\tif (newBuilds.some(build => !this.isSuitableBuild(build, readyBuilds.concat(newBuilds)))) {\r\n\t\t\tstartingBuild.children.pop();\r\n\t\t\tnewBuilds = [];\r\n\t\t}\r\n\t\treturn newBuilds;\r\n\t}\r\n\r\n\tcreateBranch (parent, length) {\r\n\t\tconst branch = [];\r\n\t\tlet partParent = parent;\r\n\t\tfor (let index = 0; index < length; index++) {\r\n\t\t\tconst corridor = this.createCorridor({ parent: partParent });\r\n\t\t\tlet closure = null;\r\n\t\t\tif (index < length - 1) {\r\n\t\t\t\tclosure = this.createConnector({ parent: corridor });\r\n\t\t\t} else {\r\n\t\t\t\tclosure = this.createRoom({ parent: corridor });\r\n\t\t\t}\r\n\t\t\tbranch.push(corridor, closure);\r\n\t\t\tpartParent = closure;\r\n\t\t}\r\n\t\treturn branch;\r\n\t}\r\n\r\n\tcreateConnector ({ parent }) {\r\n\t\tconst connector = this.createRoom({ parent, width: 1, height: 1 });\r\n\t\tconnector.type = BUILDS_TYPES.connector;\r\n\t\treturn connector;\r\n\t}\r\n\r\n\tcreateRoom ({ x, y, width, height, parent }) {\r\n\t\tconst { roomMinSize, roomMaxSize } = this.getOptions();\r\n\t\tconst room = this.createBuild(BUILDS_TYPES.room, {\r\n\t\t\tparent,\r\n\t\t\tx,\r\n\t\t\ty,\r\n\t\t\twidth: width || this.getRandom(roomMinSize, roomMaxSize),\r\n\t\t\theight: height || this.getRandom(roomMinSize, roomMaxSize),\r\n\t\t});\r\n\t\tif (parent) {\r\n\t\t\tconst direction = parent.direction || 0;\r\n\t\t\tthis.placeBuild(room, parent);\r\n\t\t}\r\n\t\treturn room;\r\n\t}\r\n\r\n\tcreateCorridor ({ x, y, width, height, parent }) {\r\n\t\tconst { corridorMinLength, corridorMaxLength } = this.getOptions();\r\n\t\tconst corridor = this.createBuild(BUILDS_TYPES.corridor, {\r\n\t\t\tparent,\r\n\t\t\twidth: 1,\r\n\t\t\theight: 1,\r\n\t\t});\r\n\t\tconst corridorLength = this.getRandom(corridorMinLength, corridorMaxLength);\r\n\t\tif (parent) {\r\n\t\t\tif (corridor.direction === DIRECTIONS.left || corridor.direction === DIRECTIONS.right) {\r\n\t\t\t\tcorridor.width = corridorLength;\r\n\t\t\t} else {\r\n\t\t\t\tcorridor.height = corridorLength;\r\n\t\t\t}\r\n\t\t\tthis.placeBuild(corridor, parent);\r\n\t\t}\r\n\t\treturn corridor;\r\n\t}\r\n\r\n\tplaceBuild (build, parent) {\r\n\t\tconst direction = build.type === BUILDS_TYPES.corridor\r\n\t\t\t? build.direction || 0\r\n\t\t\t: parent.direction || 0;\r\n\t\tif (direction === DIRECTIONS.left || direction === DIRECTIONS.right) {\r\n\t\t\tbuild.y = this.getRandom(\r\n\t\t\t\tparent.top - build.height + 1,\r\n\t\t\t\tparent.bottom - 1,\r\n\t\t\t);\r\n\t\t} else {\r\n\t\t\tbuild.x = this.getRandom(\r\n\t\t\t\tparent.left - build.width + 1,\r\n\t\t\t\tparent.right - 1,\r\n\t\t\t);\r\n\t\t}\r\n\t\tswitch (direction) {\r\n\t\t\tcase DIRECTIONS.left:\r\n\t\t\t\tbuild.x = parent.right;\r\n\t\t\t\tbreak;\r\n\t\t\tcase DIRECTIONS.bottom:\r\n\t\t\t\tbuild.y = parent.bottom;\r\n\t\t\t\tbreak;\r\n\t\t\tcase DIRECTIONS.right:\r\n\t\t\t\tbuild.x = parent.left - build.width;\r\n\t\t\t\tbreak;\r\n\t\t\tcase DIRECTIONS.top:\r\n\t\t\t\tbuild.y = parent.top - build.height;\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tgetOptions () {\r\n\t\treturn { ...this.getDefaultOptions(), ...dungeonsData.get(this).options };\r\n\t}\r\n\r\n\tcreateBuild (type, { x, y, width, height, parent }) {\r\n\t\tconst build = new Rectangle(x, y, width, height);\r\n\t\tbuild.type = type;\r\n\t\tbuild.children = [];\r\n\t\tif (parent) {\r\n\t\t\tbuild.parent = parent;\r\n\t\t\tparent.children.push(build);\r\n\t\t\tbuild.direction = parent.direction;\r\n\t\t}\r\n\t\tif (type === BUILDS_TYPES.corridor) {\r\n\t\t\tbuild.direction = this.getRandom(0, 3);\r\n\t\t}\r\n\t\treturn build;\r\n\t}\r\n\r\n\tgetRandom (min, max) {\r\n\t\tconst seededRandom = dungeonsData.get(this).prng.generate();\r\n\t\treturn Math.floor(min + seededRandom * (max + 1 - min));\r\n\t}\r\n\r\n\tisSuitableBuild (newBuild, readyBuilds) {\r\n\t\tconst checkingBuilds = readyBuilds.filter(build => {\r\n\t\t\tconst isSelf = build === newBuild;\r\n\t\t\tconst isParent = build === newBuild.parent;\r\n\t\t\tconst isChildren = newBuild.children.includes(build);\r\n\t\t\tconst isConnected = build.children.includes(newBuild.parent) || newBuild.children.includes(build.parent);\r\n\t\t\treturn !isSelf && !isParent && !isChildren && !isConnected;\r\n\t\t});\r\n\t\treturn !checkingBuilds.some(build => build.collides(newBuild));\r\n\t}\r\n\r\n\toptimizeBuilds (builds) {\r\n\t\tconst topLeft = this.getTopLeftPoint(builds);\r\n\t\tif (topLeft.x < 1) {\r\n\t\t\tthis.translateBuilds(builds, 1 - topLeft.x, 0);\r\n\t\t}\r\n\t\tif (topLeft.y < 1) {\r\n\t\t\tthis.translateBuilds(builds, 0, 1 - topLeft.y);\r\n\t\t}\r\n\t\treturn builds;\r\n\t}\r\n\r\n\tgetTopLeftPoint (builds) {\r\n\t\tconst topLeft = new Point(Infinity, Infinity);\r\n\t\tbuilds.forEach(build => {\r\n\t\t\tif (build.x < topLeft.x) {\r\n\t\t\t\ttopLeft.x = build.x;\r\n\t\t\t}\r\n\t\t\tif (build.y < topLeft.y) {\r\n\t\t\t\ttopLeft.y = build.y;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn topLeft;\r\n\t}\r\n\r\n\ttranslateBuilds (builds, offsetX, offsetY) {\r\n\t\treturn builds.forEach(build => {\r\n\t\t\tbuild.x += offsetX;\r\n\t\t\tbuild.y += offsetY;\r\n\t\t});\r\n\t}\r\n\r\n\tcreateBuffer (builds) {\r\n\t\tconst bottomRight = this.getBottomRightPoint(builds);\r\n\t\tdungeonsData.get(this).width = bottomRight.x + 1;\r\n\t\tdungeonsData.get(this).height = bottomRight.y + 1;\r\n\t\tconst buffer = Array(this.width * this.height);\r\n\t\tbuffer.fill(false);\r\n\t\tbuilds.forEach(build => this.fillRectangle(buffer, this.height, build));\r\n\t\treturn buffer;\r\n\t}\r\n\r\n\tgetBottomRightPoint (builds) {\r\n\t\tconst bottomRight = new Point(-Infinity, -Infinity);\r\n\t\tbuilds.forEach(build => {\r\n\t\t\tif (build.right > bottomRight.x) {\r\n\t\t\t\tbottomRight.x = build.right;\r\n\t\t\t}\r\n\t\t\tif (build.bottom > bottomRight.y) {\r\n\t\t\t\tbottomRight.y = build.bottom;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn bottomRight;\r\n\t}\r\n\r\n\tfillRectangle (buffer, height, { left, bottom, right, top }) {\r\n\t\tfor (let y = top; y < bottom; y++) {\r\n\t\t\tfor (let x = left; x < right; x++) {\r\n\t\t\t\tbuffer[this.getBufferIndex(x, y)] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tgetBufferIndex (x, y) {\r\n\t\treturn (x * this.height) + y;\r\n\t}\r\n}\r\n","import PRNG from './PRNG';\r\nimport Dungeon from './Dungeon';\r\nimport Explorer from './Explorer';\r\nimport Pathfinder from './Pathfinder';\r\n\r\nconst rglk = Object.freeze({\r\n\tPRNG,\r\n\tDungeon,\r\n\tExplorer,\r\n\tPathfinder,\r\n});\r\n\r\nexport default rglk;\r\n\r\nexport {\r\n\tPRNG,\r\n\tDungeon,\r\n\tExplorer,\r\n\tPathfinder,\r\n};\r\n"],"sourceRoot":""}