{"version":3,"sources":["webpack://rglk/webpack/universalModuleDefinition","webpack://rglk/webpack/bootstrap","webpack://rglk/./src/Point.js","webpack://rglk/./src/PRNG.js","webpack://rglk/./src/Node.js","webpack://rglk/./src/Pathfinder.js","webpack://rglk/./src/Explorer.js","webpack://rglk/./src/Rectangle.js","webpack://rglk/./src/Dungeon.js","webpack://rglk/./src/Rglk.js","webpack://rglk/./src/index.js"],"names":["root","factory","exports","module","define","amd","window","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Point","x","y","_classCallCheck","this","point","Math","sqrt","pow","point2","result","Number","_x","isNaN","_y","PRNG","seed","_seed","isFinite","random","min","max","_updateSeed","_Point2","Node","options","_this","_possibleConstructorReturn","__proto__","getPrototypeOf","g","h","parent","path","currentNode","push","reverse","_g","_h","_parent","node","_Node","Pathfinder","isOpen","Function","TypeError","_isOpen","x1","y1","x2","y2","start","end","unvisitedNodes","visitedNodes","resultPath","_loop","currentNodeIndex","forEach","item","f","splice","isEqualTo","getPathToRoot","neighbors","_getNeighbors","_loop2","neighbor","find","_getHeuristic","length","abs","_Point","Explorer","isTransparent","_isTransparent","point0","point1","dx","dy","nx","ny","sx","sy","points","ix","iy","centerX","centerY","radius","checkExplored","checkArguments","apply","arguments","squareRaduis","center","minX","maxX","minY","maxY","line","_getPointsOfLine","tile","Rectangle","width","height","rectangle","left","top","callback","_width","_height","Dungeon","_tiles","_rooms","_corridors","_prng","_options","applyOptions","resultOptions","keys","defaultOptions","option","parseInt","isWall","Array","isArray","_generateBuilds","_optimizeBuilds","_createMap","_this2","round","generate","roomsAmount","roomMinSize","roomMaxSize","corridorMinLength","corridorMaxLength","index","lastRoom","newWidth","newHeight","newRoom","newCorridorLength","newCorridor","direction","collision","deltaWidth","deltaHeight","bottom","right","collides","topLeft","_getTopLeft","_translateBuilds","Infinity","builds","build","bottomRight","offsetX","offsetY","_this3","_getBottomRight","_fillMap","_fillRectangle","startX","startY","slice","rooms","concat","corridors","Rglk","assign","_Rglk","rglk"],"mappings":"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","file":"js/rglk.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"rglk\"] = factory();\n\telse\n\t\troot[\"rglk\"] = factory();\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 8);\n","/**\r\n * Represents a 2D Point.\r\n */\r\nexport default class Point {\r\n\t/**\r\n\t * Create a Point.\r\n\t * @param {number} x - the x of point.\r\n\t * @param {number} y - the y of point.\r\n\t */\r\n\tconstructor(x, y) {\r\n\t\tthis.x = x;\r\n\t\tthis.y = y;\r\n\t}\r\n\r\n\tstatic create (object) {\r\n\t\tobject = object || {};\r\n\t\treturn new Point(\r\n\t\t\tobject.x,\r\n\t\t\tobject.y,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get x value.\r\n\t * @return {number} The x value.\r\n\t */\r\n\tget x () {\r\n\t\treturn Number(this._x) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set x value.\r\n\t * @param {number} The x value.\r\n\t */\r\n\tset x (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._x = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get y value.\r\n\t * @return {number} The y value.\r\n\t */\r\n\tget y () {\r\n\t\treturn Number(this._y) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set y value.\r\n\t * @param {number} The y value.\r\n\t */\r\n\tset y (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._y = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get distance to a point.\r\n\t * @param {Point} Object of Point class.\r\n\t * @return {number} The distance.\r\n\t */\r\n\tdistance (point) {\r\n\t\tpoint = point || {};\r\n\t\treturn Math.sqrt(Math.pow(point2.x - this.x, 2) + Math.pow(point2.y - this.y, 2));\r\n\t}\r\n\r\n\tisEqualTo (point) {\r\n\t\tlet result = false;\r\n\t\tif (point instanceof Point) {\r\n\t\t\tresult = point.x === this.x && point.y === this.y;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n}\r\n","/**\r\n * Represents a Pseudo Random Number Generator.\r\n * Thanks for author of this article: http://indiegamr.com/generate-repeatable-random-numbers-in-js/\r\n */\r\nexport default class PRNG {\r\n\t/**\r\n\t * Create a PRNG.\r\n\t * @param  {number} seed Seed - number which will the base for generate numbers.\r\n\t */\r\n\tconstructor (seed) {\r\n\t\tthis._seed = isNaN(seed) || !isFinite(seed)\r\n\t\t\t? Math.random()\r\n\t\t\t: Number(seed);\r\n\t}\r\n\r\n\t/**\r\n\t * Resturs random number between min and max.\r\n\t * @param  {number} [min=0] Lower bound.\r\n\t * @param  {number} [max=1] Upper bound.\r\n\t * @return {number} Float between min and max.\r\n\t */\r\n\tgenerate (min, max) {\r\n\t\tmax = isNaN(max) ? 1 : Number(max);\r\n\t\tmin = isNaN(min) ? 0 : Number(min);\r\n\t\tconst random = this._updateSeed() / 233280;\r\n\t\treturn min + random * (max - min);\r\n\t}\r\n\r\n\t/**\r\n\t * Update seed.\r\n\t * @return {number} Updated seed.\r\n\t */\r\n\t_updateSeed () {\r\n\t\treturn this._seed = (this._seed * 9301 + 49297) % 233280;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\nexport default class Node extends Point {\r\n\tconstructor(options) {\r\n\t\toptions = options || {};\r\n\t\tsuper(options.x, options.y);\r\n\t\tthis.g = options.g;\r\n\t\tthis.h = options.h;\r\n\t\tthis.parent = options.parent;\r\n\t}\r\n\r\n\tget g () {\r\n\t\treturn Number(this._g) || 0;\r\n\t}\r\n\r\n\tset g (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._g = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\tget h () {\r\n\t\treturn Number(this._h) || 0;\r\n\t}\r\n\r\n\tset h (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._h = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\tget parent () {\r\n\t\treturn this._parent instanceof Node\r\n\t\t\t? this._parent\r\n\t\t\t: null;\r\n\t}\r\n\r\n\tset parent (node) {\r\n\t\tif (node instanceof Node) {\r\n\t\t\tthis._parent = node;\r\n\t\t}\r\n\t}\r\n\r\n\tget f () {\r\n\t\treturn (this.g + this.h);\r\n\t}\r\n\r\n\tgetPathToRoot () {\r\n\t\tconst path = [];\r\n\t\tlet currentNode = this;\r\n\t\twhile (currentNode.parent) {\r\n\t\t\tpath.push(currentNode);\r\n\t\t\tcurrentNode = currentNode.parent;\r\n\t\t}\r\n\t\treturn path.reverse();\r\n\t}\r\n}\r\n","import Node from './Node';\r\n\r\n/**\r\n * Represents a Pathfinder class.\r\n */\r\nexport default class Pathfinder {\r\n\t/**\r\n\t * Create a Pathfinder.\r\n\t * @param {Function} isOpen Callback, defines that point is open.\r\n\t */\r\n\tconstructor(isOpen) {\r\n\t\tif (isOpen instanceof Function) {\r\n\t\t\tthis._isOpen = isOpen;\r\n\t\t} else {\r\n\t\t\tthrow new TypeError('Pathfinder.constructor: first argument must be a function');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Search path between two points.\r\n\t * @param {number} x1 First point x.\r\n\t * @param {number} y1 First point y.\r\n\t * @param {number} x2 Second point x.\r\n\t * @param {number} y2 Second point y.\r\n\t * @return {Array} List of path points.\r\n\t */\r\n\tsearch(x1, y1, x2, y2) {\r\n\t\tlet start = new Node({\r\n\t\t\t\tx: x1,\r\n\t\t\t\ty: y1,\r\n\t\t\t}),\r\n\t\t\tend = new Node({\r\n\t\t\t\tx: x2,\r\n\t\t\t\ty: y2,\r\n\t\t\t}),\r\n\t\t\tunvisitedNodes = [start],\r\n\t\t\tvisitedNodes = [],\r\n\t\t\tresultPath = [];\r\n\r\n\t\t// main loop\r\n\t\twhile (unvisitedNodes.length) {\r\n\t\t\t// search in open list node with lowest value f = g + h\r\n\t\t\tlet currentNodeIndex = 0,\r\n\t\t\t\tcurrentNode = unvisitedNodes[0];\r\n\t\t\tunvisitedNodes.forEach((item, i) => {\r\n\t\t\t\tif (item.f < currentNode.f) {\r\n\t\t\t\t\tcurrentNode = item;\r\n\t\t\t\t\tcurrentNodeIndex = i;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\t// add found node to closed list, delete it from open list\r\n\t\t\tunvisitedNodes.splice(currentNodeIndex, 1);\r\n\t\t\tvisitedNodes.push(currentNode);\r\n\r\n\t\t\t// if current node is target then create path and break\r\n\t\t\tif (currentNode.isEqualTo(end)) {\r\n\t\t\t\tresultPath = currentNode.getPathToRoot();\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tlet neighbors = this._getNeighbors(currentNode); // @TODO check length before run cycle\r\n\t\t\tfor (let i = 0; i < neighbors.length; i++) {\r\n\t\t\t\tlet neighbor = neighbors[i];\r\n\r\n\t\t\t\t// ignore neighbor if he in closed list\r\n\t\t\t\tif (visitedNodes.find(node => node.isEqualTo(neighbor))) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// if neighbor not in open list, add him to open list, update h\r\n\t\t\t\tif (!unvisitedNodes.find(node => node.isEqualTo(neighbor))) {\r\n\t\t\t\t\tneighbor.h = this._getHeuristic(neighbor.x, neighbor.y, end.x, end.y);\r\n\t\t\t\t\tunvisitedNodes.push(neighbor);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn resultPath;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns heuristic value (Manhattan distance) between two nodes.\r\n\t * @param  {number} x1 First node x.\r\n\t * @param  {number} y1 First node y.\r\n\t * @param  {number} x2 Second node x.\r\n\t * @param  {number} y2 Second node y.\r\n\t * @return {number} heuristic value.\r\n\t */\r\n\t_getHeuristic (x1, y1, x2, y2) {\r\n\t\tconst d1 = Math.abs(x2 - x1),\r\n\t\t\td2 = Math.abs(y2 - y1);\r\n\t\treturn d1 + d2;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns list of node neighbors.\r\n\t * @param  {Node} node Node to get a neighbors.\r\n\t * @return {Array} List of neighbors.\r\n\t * @TODO move to Node class?\r\n\t */\r\n\t_getNeighbors (node) {\r\n\t\tlet neighbors = [];\r\n\t\tfor (let y = -1; y <= 1; y++) {\r\n\t\t\tfor (let x = -1; x <= 1; x++) {\r\n\t\t\t\t// if is not diagonal neighbor\r\n\t\t\t\tif (Math.abs(x + y) === 1) {\r\n\t\t\t\t\tif (this._isOpen(node.x + x, node.y + y)) {\r\n\t\t\t\t\t\tneighbors.push(new Node({\r\n\t\t\t\t\t\t\tx: node.x + x,\r\n\t\t\t\t\t\t\ty: node.y + y,\r\n\t\t\t\t\t\t\tg: node.g + 1,\r\n\t\t\t\t\t\t\tparent: node,\r\n\t\t\t\t\t\t}));\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn neighbors;\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\n/**\r\n * Represents a Exlorer (FOV calculation) class.\r\n */\r\nexport default class Explorer {\r\n\t/**\r\n\t * Create a Explorer.\r\n\t * @param {Function} isTransparent - callback for identify tile.\r\n\t */\r\n\tconstructor(isTransparent) {\r\n\t\tif (isTransparent instanceof Function) {\r\n\t\t\tthis._isTransparent = isTransparent;\r\n\t\t} else {\r\n\t\t\tthrow new TypeError(`Explorer.calculate: ${this._isTransparent} is not a Function`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get line on a grid. Based on Bresenham's line algorithm.\r\n\t * @param {Point} point0 - Object of class Point, start position.\r\n\t * @param {Point} point1 - Object of class Point, end position.\r\n\t * @private\r\n\t */\r\n\t_getPointsOfLine (point0, point1) {\r\n\t\tlet dx = point1.x - point0.x,\r\n\t\t\tdy = point1.y - point0.y,\r\n\t\t\tnx = Math.abs(dx),\r\n\t\t\tny = Math.abs(dy),\r\n\t\t\tsx = (dx > 0) ? 1 : -1,\r\n\t\t\tsy = (dy > 0) ? 1 : -1,\r\n\t\t\tp = new Point(point0.x, point0.y),\r\n\t\t\tpoints = [new Point(p.x, p.y)];\r\n\t\tfor (let ix = 0, iy = 0; ix < nx || iy < ny;) {\r\n\t\t\tif ((0.5 + ix) / nx == (0.5 + iy) / ny) {\r\n\t\t\t\tp.x += sx;\r\n\t\t\t\tp.y += sy;\r\n\t\t\t\tix++;\r\n\t\t\t\tiy++;\r\n\t\t\t} else if ((0.5 + ix) / nx < (0.5 + iy) / ny) {\r\n\t\t\t\tp.x += sx;\r\n\t\t\t\tix++;\r\n\t\t\t} else {\r\n\t\t\t\tp.y += sy;\r\n\t\t\t\tiy++;\r\n\t\t\t}\r\n\t\t\tpoints.push(new Point(p.x, p.y));\r\n\t\t}\r\n\t\treturn points;\r\n\t}\r\n\r\n\t/**\r\n\t * Calculate FOV.\r\n\t * @param {number} centerX The x position of center.\r\n\t * @param {number} centerY The y position of center.\r\n\t * @param {number} radius Radius of view.\r\n\t * @param {Function} checkExplored Called if tile is explored.\r\n\t */\r\n\tcalculate(centerX, centerY, radius, checkExplored) {\r\n\t\tthis.checkArguments(...arguments);\r\n\t\tconst squareRaduis = Math.pow(radius, 2),\r\n\t\t\tcenter = new Point(centerX, centerY),\r\n\t\t\tminX = center.x - radius,\r\n\t\t\tmaxX = center.x + radius,\r\n\t\t\tminY = center.y - radius,\r\n\t\t\tmaxY = center.y + radius;\r\n\r\n\t\t// check floors in radius\r\n\t\tfor (let y = minY; y <= maxY; y++) {\r\n\t\t\tfor (let x = minX; x <= maxX; x++) {\r\n\t\t\t\tif (y === minY || y === maxY || x === minX || x === maxX) {\r\n\t\t\t\t\t// check line of sight\r\n\t\t\t\t\tconst line = this._getPointsOfLine(center, new Point(x, y));\r\n\t\t\t\t\tfor (let i = 0; i < line.length; i++) {\r\n\t\t\t\t\t\tlet tile = line[i],\r\n\t\t\t\t\t\t\tsquareDistance = Math.pow(center.x - tile.x, 2) + Math.pow(center.y - tile.y, 2);\r\n\t\t\t\t\t\tif (squareDistance <= squareRaduis) {\r\n\t\t\t\t\t\t\tif (!this._isTransparent(tile.x, tile.y) ) {\r\n\t\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcheckExplored(tile.x, tile.y);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tcheckArguments (centerX, centerY, radius, checkExplored) {\r\n\t\tif (isNaN(centerX) || isNaN(centerY) || isNaN(radius)) {\r\n\t\t\tthrow new TypeError(`Explorer.calculate: first three arguments must be a number`);\r\n\t\t}\r\n\t\tif (!(checkExplored instanceof Function)) {\r\n\t\t\tthrow new TypeError(`Explorer.calculate: fourth argument must be a function`);\r\n\t\t}\r\n\t}\r\n}\r\n","import Point from './Point';\r\n\r\n/**\r\n * Represents a Rectangle\r\n * @extends Point\r\n */\r\nexport default class Rectangle extends Point {\r\n\t/**\r\n\t * Create a Rectangle.\r\n\t * @param {number} x - Left border position of rectangle.\r\n\t * @param {number} y - Top border position of rectangle.\r\n\t * @param {number} width - Width of rectangle.\r\n\t * @param {number} height - Height of rectangle.\r\n\t */\r\n\tconstructor(x, y, width, height) {\r\n\t\tsuper(x, y);\r\n\t\tthis.width = width;\r\n\t\tthis.height = height;\r\n\t}\r\n\r\n\tstatic create (object) {\r\n\t\tobject = object || {};\r\n\t\treturn new Rectangle(\r\n\t\t\tobject.x,\r\n\t\t\tobject.y,\r\n\t\t\tobject.width,\r\n\t\t\tobject.height,\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Get width of Rectangle.\r\n\t * @return {number} The width of Rectangle.\r\n\t */\r\n\tget width() {\r\n\t\treturn Number(this._width) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set width of Rectangle.\r\n\t * @param {number} The Width of Rectangle.\r\n\t */\r\n\tset width(value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._width = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get height of Rectangle.\r\n\t * @return {number} The height of Rectangle.\r\n\t */\r\n\tget height() {\r\n\t\treturn Number(this._height) || 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Set height of Rectangle.\r\n\t * @param {number} The height of Rectangle.\r\n\t */\r\n\tset height (value) {\r\n\t\tif (!isNaN(value)) {\r\n\t\t\tthis._height = Number(value);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get top of Rectangle.\r\n\t * @return {number} The top border of Rectangle.\r\n\t */\r\n\tget top () {\r\n\t\treturn this.y;\r\n\t}\r\n\r\n\t/**\r\n\t * Get right of Rectangle.\r\n\t * @return {number} The right border of Rectangle.\r\n\t */\r\n\tget right () {\r\n\t\treturn this.x + this.width - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Get bottom of Rectangle.\r\n\t * @return {number} The bottom border of Rectangle.\r\n\t */\r\n\tget bottom () {\r\n\t\treturn this.y + this.height - 1;\r\n\t}\r\n\r\n\t/**\r\n\t * Get left of Rectangle.\r\n\t * @return {number} The left border of Rectangle.\r\n\t */\r\n\tget left () {\r\n\t\treturn this.x;\r\n\t}\r\n\r\n\t/**\r\n\t * Get center of Rectangle.\r\n\t * @return {Point} Point with coordinates to center of Rectangle.\r\n\t */\r\n\tget center () {\r\n\t\treturn new Point(\r\n\t\t\tthis.x + (this.width / 2),\r\n\t\t\tthis.y + (this.height / 2)\r\n\t\t);\r\n\t}\r\n\r\n\t/**\r\n\t * Check collides with other Rectangle.\r\n\t * @param {object} rectangle - Object of class Rectangle.\r\n\t * @return {boolean} The boolean.\r\n\t */\r\n\tcollides(rectangle) {\r\n\t\tlet result = true;\r\n\t\tif (\r\n\t\t\trectangle.left > this.left + this.width ||\r\n\t\t\trectangle.left + rectangle.width < this.left ||\r\n\t\t\trectangle.top > this.top + this.height ||\r\n\t\t\trectangle.top + rectangle.height < this.top\r\n\t\t) {\r\n\t\t\tresult = false;\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\tforEachPoint (callback) {}\r\n}\r\n","import PRNG from './PRNG';\r\nimport Point from './Point';\r\nimport Rectangle from './Rectangle';\r\n\r\n/**\r\n * Represents a Dungeon class.\r\n */\r\nexport default class Dungeon {\r\n\t/**\r\n\t * Create a dungeon.\r\n\t * @param {Object} [options] - Dungeon generation options.\r\n\t * @param {number} options.seed - The seed to pseudorandom number generator.\r\n\t * @param {number} options.roomsAmount - The amount of rooms.\r\n\t * @param {number} options.roomMinSize - Min size of room.\r\n\t * @param {number} options.roomMaxSize - Max size of room.\r\n\t * @param {number} options.corridorMinLength - Min length of corridors.\r\n\t * @param {number} options.corridorMaxLength - Max length of corridors.\r\n\t */\r\n\tconstructor (options) {\r\n\t\toptions = options || {};\r\n\t\t// @TODO this.map = new Rectangle()?\r\n\t\tthis._tiles = [];\r\n\t\tthis._rooms = [];\r\n\t\tthis._corridors = [];\r\n\t\tthis._prng = new PRNG(options.seed);\r\n\t\tthis._options = this.applyOptions(options);\r\n\t}\r\n\r\n\tapplyOptions (options) {\r\n\t\toptions = options || {};\r\n\t\tconst resultOptions = {};\r\n\t\tObject.keys(this.defaultOptions).forEach(key => {\r\n\t\t\tconst option = options[key];\r\n\t\t\tif (isNaN(option) || !isFinite(option) || option < 1) {\r\n\t\t\t\tresultOptions[key] = parseInt(this.defaultOptions[key], 10) || 1;\r\n\t\t\t} else {\r\n\t\t\t\tresultOptions[key] = parseInt(option, 10);\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn resultOptions;\r\n\t}\r\n\r\n\t/**\r\n\t * Get default options.\r\n\t * @readonly\r\n\t */\r\n\tget defaultOptions () {\r\n\t\treturn {\r\n\t\t\tseed: Math.random(),\r\n\t\t\troomsAmount: 7,\r\n\t\t\troomMinSize: 5,\r\n\t\t\troomMaxSize: 10,\r\n\t\t\tcorridorMinLength: 3,\r\n\t\t\tcorridorMaxLength: 7,\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of rooms.\r\n\t * @readonly\r\n\t * @return {array} List of rooms.\r\n\t */\r\n\tget rooms () {\r\n\t\treturn this._rooms.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of corridors.\r\n\t * @readonly\r\n\t * @return {array} List of corridors.\r\n\t */\r\n\tget corridors () {\r\n\t\treturn this._corridors.slice();\r\n\t}\r\n\r\n\t/**\r\n\t * Get the array of all builds.\r\n\t * @readonly\r\n\t * @return {array} List of builds (rooms & corridors).\r\n\t */\r\n\tget builds () {\r\n\t\treturn this.rooms.concat(this.corridors);\r\n\t}\r\n\r\n\t/**\r\n\t * Get the width of dungeon.\r\n\t * @readonly\r\n\t * @return {number} The dungeon width (number of tiles).\r\n\t */\r\n\tget width () {\r\n\t\treturn Array.isArray(this._tiles[0]) ? this._tiles[0].length : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the height of dungeon.\r\n\t * @readonly\r\n\t * @return {number} The dungeon height (number of tiles).\r\n\t */\r\n\tget height () {\r\n\t\treturn Array.isArray(this._tiles) ? this._tiles.length : 0;\r\n\t}\r\n\r\n\t/**\r\n\t * Run callback for each tile of generated map.\r\n\t * @param {Function} callback Function called fo each tile.\r\n\t */\r\n\tforEachTile (callback) {\r\n\t\tif (this._tiles && callback instanceof Function) {\r\n\t\t\tfor (var y = 0; y < this._tiles.length; y++) {\r\n\t\t\t\tfor (var x = 0; x < this._tiles[y].length; x++) {\r\n\t\t\t\t\tcallback(x, y, this._tiles[y][x]);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn this;\r\n\t}\r\n\r\n\tisFloor () {\r\n\t\treturn !this.isWall.call(this, arguments);\r\n\t}\r\n\r\n\t/**\r\n\t * Get type of tile.\r\n\t * @param {number} x - The y of tile position.\r\n\t * @param {number} y - The x of tile position.\r\n\t * @return {boolean}\r\n\t */\r\n\tisWall (x, y) {\r\n\t\tlet result = false;\r\n\t\tif (Array.isArray(this._tiles[y]) && this._tiles[y].hasOwnProperty(x)) {\r\n\t\t\tresult = !this._tiles[y][x];\r\n\t\t}\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * Generate dungeon. Generate arrays of rooms and corridors, matrix of tiles\r\n\t */\r\n\tgenerate () {\r\n\t\tthis._generateBuilds();\r\n\t\tthis._optimizeBuilds();\r\n\t\tthis._createMap();\r\n\t}\r\n\r\n\t/**\r\n\t * Generate builds (rooms & corridors).\r\n\t * @private\r\n\t * @TODO need decomposition!\r\n\t */\r\n\t_generateBuilds () {\r\n\t\tconst random = (max, min) => Math.round(this._prng.generate(min, max)),\r\n\t\t\troomsAmount = this._options.roomsAmount,\r\n\t\t\troomMinSize = this._options.roomMinSize,\r\n\t\t\troomMaxSize = this._options.roomMaxSize,\r\n\t\t\tcorridorMinLength = this._options.corridorMinLength,\r\n\t\t\tcorridorMaxLength = this._options.corridorMaxLength;\r\n\r\n\t\t// set default\r\n\t\tthis._rooms = [];\r\n\t\tthis._corridors = [];\r\n\r\n\t\t// add first room\r\n\t\tthis._rooms.push(new Rectangle(\r\n\t\t\t1,\r\n\t\t\t1,\r\n\t\t\trandom(roomMinSize, roomMaxSize),\r\n\t\t\trandom(roomMinSize, roomMaxSize)\r\n\t\t));\r\n\r\n\t\t// main loop\r\n\t\twhile (this._rooms.length < roomsAmount) {\r\n\t\t\t// configure new room relative random room from list\r\n\t\t\tlet index = random(0, this._rooms.length - 1),\r\n\t\t\t\tlastRoom = this._rooms[index],\r\n\t\t\t\tnewWidth = random(roomMinSize, roomMaxSize),\r\n\t\t\t\tnewHeight = random(roomMinSize, roomMaxSize),\r\n\t\t\t\tnewRoom = new Rectangle(0, 0, newWidth, newHeight),\r\n\t\t\t\tnewCorridorLength = random(corridorMinLength, corridorMaxLength),\r\n\t\t\t\tnewCorridor = new Rectangle(0, 0, 1, 1),\r\n\t\t\t\tdirection = random(0, 3),\r\n\t\t\t\tcollision = false,\r\n\t\t\t\tdeltaWidth = newRoom.width - lastRoom.width,\r\n\t\t\t\tdeltaHeight = newRoom.height - lastRoom.height;\r\n\r\n\t\t\t// configure new corridor and room\r\n\t\t\tif (direction === 0 || direction === 2) {\r\n\t\t\t\tnewRoom.y = lastRoom.y - random(0, deltaHeight);\r\n\t\t\t\tnewCorridor.y = random(\r\n\t\t\t\t\tMath.max(lastRoom.top, newRoom.top),\r\n\t\t\t\t\tMath.min(lastRoom.bottom, newRoom.bottom)\r\n\t\t\t\t);\r\n\t\t\t\tnewCorridor.width = newCorridorLength;\r\n\t\t\t} else {\r\n\t\t\t\tnewRoom.x = lastRoom.x - random(0, deltaWidth);\r\n\t\t\t\tnewCorridor.height = newCorridorLength;\r\n\t\t\t\tnewCorridor.x = random(\r\n\t\t\t\t\tMath.max(lastRoom.left, newRoom.left),\r\n\t\t\t\t\tMath.min(lastRoom.right, newRoom.right)\r\n\t\t\t\t);\r\n\t\t\t}\r\n\r\n\t\t\t// configure new corridor and room\r\n\t\t\tif (direction === 0) {\r\n\t\t\t\tnewRoom.x = lastRoom.right + newCorridorLength + 1;\r\n\t\t\t\tnewCorridor.x = lastRoom.right + 1;\r\n\t\t\t} else if (direction === 1) {\r\n\t\t\t\tnewRoom.y = lastRoom.bottom + newCorridorLength + 1;\r\n\t\t\t\tnewCorridor.y = lastRoom.bottom + 1;\r\n\t\t\t} else if (direction === 2) {\r\n\t\t\t\tnewRoom.x = lastRoom.left - newCorridorLength - newRoom.width;\r\n\t\t\t\tnewCorridor.x = lastRoom.left - newCorridor.width;\r\n\t\t\t} else {\r\n\t\t\t\tnewRoom.y = lastRoom.top - newCorridorLength - newRoom.height;\r\n\t\t\t\tnewCorridor.y = lastRoom.top - newCorridor.height;\r\n\t\t\t}\r\n\r\n\t\t\t// check cillosoions new room and corridor with rooms\r\n\t\t\tfor (let i = 0; i < this._rooms.length; i++) {\r\n\t\t\t\tif (newRoom.collides(this._rooms[i])) {\r\n\t\t\t\t\tcollision = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tif (newCorridor.collides(this._rooms[i])) {\r\n\t\t\t\t\tif (index !== i) { // if this is not last room\r\n\t\t\t\t\t\tcollision = true;\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// check cillosoions new room with corridors\r\n\t\t\tfor (let i = 0; i < this._corridors.length; i++) {\r\n\t\t\t\tif (newRoom.collides(this._corridors[i])) {\r\n\t\t\t\t\tcollision = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// add builds\r\n\t\t\tif (!collision) {\r\n\t\t\t\tthis._rooms.push(newRoom);\r\n\t\t\t\tthis._corridors.push(newCorridor);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Translate all builds to positive coordinates.\r\n\t * @private\r\n\t */\r\n\t_optimizeBuilds () {\r\n\t\t// leftmost top point search\r\n\t\tconst topLeft = this._getTopLeft();\r\n\r\n\t\t// translate rooms to leftmost top position (1, 1)\r\n\t\tif (topLeft.x < 1) {\r\n\t\t\tthis._translateBuilds(1 - topLeft.x, 0);\r\n\t\t}\r\n\t\tif (topLeft.y < 1) {\r\n\t\t\tthis._translateBuilds(0, 1 - topLeft.y);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Get the point of leftmost top position among all builds.\r\n\t * @private\r\n\t * @return {Object} The point.\r\n\t */\r\n\t_getTopLeft () {\r\n\t\tconst topLeft = new Point(Infinity, Infinity);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tif (build.x < topLeft.x) {\r\n\t\t\t\ttopLeft.x = build.x;\r\n\t\t\t}\r\n\t\t\tif (build.y < topLeft.y) {\r\n\t\t\t\ttopLeft.y = build.y;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn topLeft;\r\n\t}\r\n\r\n\t/**\r\n\t * Get the point of rightmost bottom position among all builds.\r\n\t * @private\r\n\t * @return {Object} The point.\r\n\t */\r\n\t_getBottomRight () {\r\n\t\tconst bottomRight = new Point(-Infinity, -Infinity);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tif (build.right > bottomRight.x) {\r\n\t\t\t\tbottomRight.x = build.right;\r\n\t\t\t}\r\n\t\t\tif (build.bottom > bottomRight.y) {\r\n\t\t\t\tbottomRight.y = build.bottom;\r\n\t\t\t}\r\n\t\t});\r\n\t\treturn bottomRight;\r\n\t}\r\n\r\n\t/**\r\n\t * Translate all builds.\r\n\t * @private\r\n\t * @param {number} offsetX - Offset by x axis.\r\n\t * @param {number} offsetY - Offset by y axis.\r\n\t */\r\n\t_translateBuilds (offsetX, offsetY) {\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tbuild.x += offsetX;\r\n\t\t\tbuild.y += offsetY;\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Create map: generate array of arrays of tiles.\r\n\t * @private\r\n\t */\r\n\t_createMap () {\r\n\t\tlet bottomRight = this._getBottomRight();\r\n\t\tthis._fillMap(bottomRight.x + 2, bottomRight.y + 2);\r\n\t\tthis.builds.forEach(build => {\r\n\t\t\tthis._fillRectangle(build.x, build.y, build.width, build.height);\r\n\t\t});\r\n\t}\r\n\r\n\t/**\r\n\t * Fill map: generate matrix (array of arrays) with needed size.\r\n\t * @private\r\n\t * @param {number} width - The width of matrix.\r\n\t * @param {number} height - The height of matrix.\r\n\t * @TODO new Rectangle\r\n\t */\r\n\t_fillMap (width, height) {\r\n\t\t// set default\r\n\t\tthis._tiles = [];\r\n\r\n\t\t// this._tiles[y][x] === true (floor) || false (wall)\r\n\t\tfor (var y = 0; y < height; y++) {\r\n\t\t\tthis._tiles.push([]);\r\n\t\t\tfor (var x = 0; x < width; x++) {\r\n\t\t\t\tthis._tiles[y].push(false);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Fill rectagle: fill rectangle area on map.\r\n\t * @private\r\n\t * @param {number} startX - Left border position of rectangle.\r\n\t * @param {number} startY - Top border position of rectangle.\r\n\t * @param {number} width - Width of rectangle.\r\n\t * @param {number} height - Height of rectangle.\r\n\t * @TODO move to Rectangle (forEachPoint)?\r\n\t */\r\n\t_fillRectangle(startX, startY, width, height) {\r\n\t\tfor (var y = startY; y <= startY + height - 1; y++) {\r\n\t\t\tfor (var x = startX; x <= startX + width - 1; x++) {\r\n\t\t\t\tthis._tiles[y][x] = true;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n","import PRNG from './PRNG';\r\nimport Dungeon from './Dungeon';\r\nimport Explorer from './Explorer';\r\nimport Pathfinder from './Pathfinder';\r\n\r\n/**\r\n * Represents a toolkit for development roguelike games.\r\n */\r\nexport default class Rglk {\r\n\t/**\r\n\t * Create a roguelike toolkit.\r\n\t */\r\n\tconstructor () {\r\n\t\tObject.assign(this, {\r\n\t\t\tPRNG,\r\n\t\t\tDungeon,\r\n\t\t\tExplorer,\r\n\t\t\tPathfinder,\r\n\t\t});\r\n\t}\r\n}\r\n","import Rglk from './Rglk';\r\n\r\nconst rglk = new Rglk();\r\n\r\nexport default rglk;\r\nexport const PRNG = rglk.PRNG;\r\nexport const Dungeon = rglk.Dungeon;\r\nexport const Explorer = rglk.Explorer;\r\nexport const Pathfinder = rglk.Pathfinder;\r\n"],"sourceRoot":""}